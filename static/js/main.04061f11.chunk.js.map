{"version":3,"sources":["packages/components/media-player/src/ProgressBar.module.scss","packages/components/settings/index.module.css","packages/components/transcript-editor/index.module.css","packages/components/timed-text-editor/index.module.css","packages/components/media-player/src/PlayerControls/index.module.scss","packages/components/media-player/src/Select.module.scss","packages/components/video-player/index.module.css","logo.svg","Warper.js","Modal.js","packages/components/timed-text-editor/CheckBox.js","packages/util/timecode-converter/src/secondsToTimecode.js","packages/util/timecode-converter/src/timecodeToSeconds.js","packages/util/timecode-converter/src/padTimeToTimecode.js","packages/util/timecode-converter/index.js","packages/components/timed-text-editor/WrapperBlock.js","packages/components/timed-text-editor/CustomEditor.js","packages/components/timed-text-editor/Word.js","packages/stt-adapters/generate-entities-ranges/index.js","packages/stt-adapters/bbc-kaldi/group-words-by-speakers.js","packages/stt-adapters/bbc-kaldi/index.js","packages/stt-adapters/autoEdit2/index.js","packages/stt-adapters/speechmatics/index.js","packages/stt-adapters/amazon-transcribe/group-words-by-speakers.js","packages/stt-adapters/amazon-transcribe/index.js","packages/stt-adapters/ibm/index.js","packages/stt-adapters/digital-paper-edit/group-words-by-speakers.js","packages/stt-adapters/digital-paper-edit/index.js","packages/stt-adapters/create-entity-map/index.js","packages/stt-adapters/google-stt/index.js","packages/stt-adapters/index.js","packages/export-adapters/txt/index.js","packages/export-adapters/docx/index.js","packages/export-adapters/txt-speakers-timecodes/index.js","packages/export-adapters/draftjs-to-digital-paper-edit/index.js","packages/export-adapters/subtitles-generator/presegment-text/text-segmentation/index.js","packages/export-adapters/subtitles-generator/presegment-text/line-break-between-sentences/index.js","packages/export-adapters/subtitles-generator/presegment-text/util/remove-space-after-carriage-return.js","packages/export-adapters/subtitles-generator/presegment-text/fold/index.js","packages/export-adapters/subtitles-generator/presegment-text/util/remove-space-at-beginning-of-line.js","packages/export-adapters/subtitles-generator/presegment-text/divide-into-two-lines/index.js","packages/export-adapters/subtitles-generator/presegment-text/index.js","packages/export-adapters/subtitles-generator/compose-subtitles/util/escape-text.js","packages/export-adapters/subtitles-generator/compose-subtitles/util/format-seconds.js","packages/export-adapters/subtitles-generator/compose-subtitles/premiere.js","packages/export-adapters/subtitles-generator/compose-subtitles/util/tc-format.js","packages/export-adapters/subtitles-generator/compose-subtitles/itt.js","packages/export-adapters/subtitles-generator/compose-subtitles/ttml.js","packages/export-adapters/subtitles-generator/compose-subtitles/srt.js","packages/export-adapters/subtitles-generator/compose-subtitles/vtt.js","packages/export-adapters/subtitles-generator/compose-subtitles/csv.js","packages/export-adapters/subtitles-generator/index.js","packages/export-adapters/index.js","packages/components/timed-text-editor/UpdateTimestamps/stt-align-node.js","packages/components/timed-text-editor/index.js","packages/components/media-player/src/Select.js","packages/components/media-player/src/PlaybackRate.js","packages/components/media-player/src/PlayerControls/TimeBox.js","packages/components/media-player/src/PlayerControls/index.js","packages/components/media-player/src/ProgressBar.js","packages/components/media-player/src/config/defaultHotKeys.js","packages/components/media-player/src/config/playbackRates.js","packages/components/media-player/index.js","packages/components/video-player/index.js","packages/components/settings/Toggle/index.js","packages/components/settings/TimecodeOffset/index.js","packages/components/settings/index.js","packages/components/keyboard-shortcuts/hot-keys.js","packages/components/keyboard-shortcuts/index.js","packages/components/transcript-editor/src/Header.js","packages/components/transcript-editor/src/ExportOptions.js","packages/components/transcript-editor/src/HowDoesThisWork.js","packages/components/transcript-editor/index.js","App.js","serviceWorker.js","index.js","packages/components/keyboard-shortcuts/index.module.css","packages/components/timed-text-editor/WrapperBlock.module.css","packages/components/media-player/index.module.scss","packages/components/transcript-editor/src/index.module.css","packages/components/settings/TimecodeOffset/index.module.css","packages/components/settings/Toggle/index.module.css"],"names":["module","exports","Comp","contentStyle","maxWidth","width","Warper","trigger","type","className","modal","lockScroll","close","onClick","class","id","CheckBox","props","getWordCount","wordArray","text","replace","trim","match","length","handleChecked","setState","isChecked","state","nWord","handleNumWord","category","action","sent","name","value","bind","this","onChange","style","marginRight","verticalAlign","for","fontSize","PureComponent","secondsToTimecode","seconds","framePerSeconds","fps","undefined","normalisedSeconds","Number","Math","floor","toPrecision","toFixed","normalisePlayerTime","wholeSeconds","frames","_padZero","n","parseInt","timecodeToSecondsHelper","tc","s","split","timecodeToFrames","isOneDigit","str","padTimeToTimecode","time","timecode","includes","includesFullStop","timecodeToSeconds","resultPadded","parseFloat","shortTimecode","slice","WrapperBlock","shouldComponentUpdate","nextProps","nextState","block","getText","blockProps","showSpeakers","showTimecodes","timecodeOffset","speaker","isEditable","getData","get","handleTimecodeClick","onWordClick","start","handleAnalyticsEvents","startTimecode","timecodeElement","markers","unselectable","join","contentEditable","suffix","sentenceLabel","React","Component","CustomEditor","handleWordClick","e","renderBlockWithTimecodes","component","editable","editorState","setEditorNewContentState","setEditorNewContentStateSpeakersUpdate","handleOnChange","stripPastedStyles","blockRendererFn","handleKeyCommand","keyBindingFn","customKeyBindingFn","spellCheck","Word","generateConfidence","data","confidence","generatePreviousTimes","prevTimes","i","dec","decoratedText","entityKey","contentState","getEntity","data-start","data-end","end","data-confidence","data-prev-times","data-entity-key","key","children","generateEntitiesRanges","words","wordAttributeName","position","map","word","result","offset","random","toString","substring","groupWordsInParagraphsBySpeakers","segments","wordsWithSpeakers","currentSpeaker","results","paragraph","forEach","push","punct","groupWordsBySpeaker","tmpWordsWithSpeakers","tmpSpeakerSegment","tmpSegment","find","seg","segEnd","duration","gender","findSegmentForWord","addSpeakerToEachWord","bbcKaldiToDraft","bbcKaldiJson","tmpWords","speakerSegmentation","retval","segmentation","test","groupWordsInParagraphs","speakerLabel","draftJsContentBlockParagraph","checked","entityRanges","autoEdit2ToDraft","autoEdit2Json","autoEditText","autoEditparagraph","autoEditLine","line","tmpWord","startTime","endTime","getSpeaker","speakers","speakerIdx","segmentStart","speechmaticsToDraft","speechmaticsJson","maxParagraphWords","newSpeaker","oldSpeaker","sentenceEnd","curatedWords","curatePunctuation","element","index","toLowerCase","paragraphStart","findSpeakerForWord","start_time","end_time","firstMatchingSegment","speaker_label","speakerLabels","groupedWords","groupWordsBySpeakerLabel","w","Object","assign","addSpeakerLabelToWords","getBestAlternativeForWord","alternatives","reduce","prev","current","normalizeWord","currentWord","bestAlternative","content","mapPunctuationItemsToWords","itemsToRemove","punctuation","previousWord","punctuationContent","appendPunctuationToPreviousWord","filter","item","amazonTranscribeToDraft","amazonTranscribeJson","items","speaker_labels","wordsWithRemappedPunctuation","speakerGroup","groupSpeakerWordsInParagraphs","normalizedWord","ibmToDraft","ibmJson","ibmWords","ibmSpeakers","normalisedWords","ibmResults","normalisedResults","timestamps","ibmWord","normalizeIBMWordsList","ibmNormalisedWordsWithSpeakers","draftJsParagraphsResults","ibmParagraph","ibmNormalisedWordsToDraftJs","lines","speakerSegments","segStart","from","to","findSpeakerSegmentForWord","currentSegment","currentSegmentIndex","previousSegmentIndex","indexOf","addWordsToSpeakersParagraphs","digitalPaperEditToDraft","digitalPaperEditTranscriptJson","paragraphs","generateDraftJsContentBlock","createEntityMap","blocks","flatEntityRanges","flatten","list","a","b","concat","Array","isArray","entityMap","mutability","computeTimeInSeconds","startSecond","nanoSecond","sentences","sentence","getBestAlternativeSentence","transcript","nanos","gcpSttToDraft","gcpSttJson","sttJsonAdapter","transcriptData","sttJsonType","console","error","blockData","transcriptTitle","doc","Document","creator","description","title","textTitle","TextRun","paragraphTitle","Paragraph","addRun","heading1","center","addParagraph","paragraphEmpty","draftJsParagraph","paragraphSpeakerTimecodes","bold","tab","textBreak","break","paragraphText","Packer","toBlob","then","blob","filename","document","createElement","href","window","URL","createObjectURL","download","click","generateDocxFromDraftJs","tmpParagraph","textSegmentation","honorifics","optionalHonorifics","options","tokenizer","addLineBreakBetweenSentences","removeSpaceAfterCarriageReturn","foldWords","foldNumber","textArray","counter","nextElementLength","foldWordsReturnArray","r","removeSpaceAtBeginningOfLine","divideIntoTwoLines","l","getTextFromWordsList","preSegmentText","textInput","tmpNumberOfCharPerLine","segmentedText","textWithLineBreakBetweenSentences","foldedText","textDividedIntoTwoLines","AMP_REGEX","LT_REGEX","GT_REGEX","escapeText","formatSeconds","Date","toISOString","substr","ttmlGeneratorPremiere","vttJSON","ttmlOut","v","tcFormat","FPS","TC","round","ittGenerator","lang","ittOut","ttmlGenerator","srtGenerator","srtOut","vttGenerator","vttOut","csvGenerator","srtJsonContent","srtLineO","subtitlesComposer","numberOfCharPerLine","subtitlesJson","wordsList","startWordCounter","endWordCounter","jsonLine","addTimecodesToLines","segmentedTextToList","preSegmentTextJson","ttml","premiere","itt","srt","vtt","json","exportAdapter","exportFormat","ext","draftToTxt","draftToDocx","draftToTxtSpeakersTimecodes","draftToDigitalPaperEdit","subtitlesGenerator","alignWords","TimedTextEditor","handleDoubleClick","event","nativeEvent","target","hasAttribute","parentElement","t","getAttribute","getCurrentContent","getPlainText","setEditorContentState","convertFromRaw","EditorState","createWithContent","decorator","forceRenderDecorator","log","getDecorator","newState","newEditorState","newContentState","format","autoSaveContentType","convertToRaw","handleAutoSaveChanges","keyCode","altKey","getDefaultKeyBinding","preventDefault","command","splitParagraph","currentSelection","getSelection","isCollapsed","currentContent","Modifier","splitBlock","splitState","targetSelection","originalBlock","blockMap","selectionBefore","getStartKey","blockSpeaker","wordStartTime","isEndOfParagraph","getEntityAt","getStartOffset","closestEntityToSelection","findClosestEntityKeyToSelectionPoint","entityData","afterMergeContentState","mergeBlockData","startSelectionOffsetKey","lengthPlainTextForTheBlock","getLength","remainingCharNumber","j","initialSelectionOffset","getCurrentWord","currentTime","isScrollIntoViewOn","querySelector","scrollIntoView","inline","createEmpty","loadData","prevProps","prevState","originalState","editor","onDoubleClick","scoped","CompositeDecorator","strategy","contentBlock","callback","findEntityRanges","character","getMutability","Select","option","label","selectPlayerControl","currentValue","handleChange","PlaybackRate","isEqual","playBackRate","playbackRateOptions","playbackRate","handlePlayBackRateChange","TimeBox","handleClick","promptSetCurrentTime","timeBox","separator","ProgressBar","buttonClick","wrapper","bar","min","max","defaultProps","returnHotKeys","self","priority","handler","togglePlayMedia","displayKeyCombination","skipForward","skipBackward","decreasePlaybackRate","increasePlaybackRate","rollBack","PLAYBACK_RATES","MediaPlayer","hot_keys","setCurrentTime","newCurrentTime","newCurrentTimeInSeconds","videoRef","readyState","playMedia","userTimecodeValue","prompt","setTimeCodeOffset","newTimeCodeOffSet","rollBackValueInSeconds","tmpDesiredCurrentTime","setPlayBackRate","input","slower","reverse","newSpeed","faster","handleChangeReplayRollbackValue","handleMuteVolume","volume","isMute","isPlaying","paused","pauseMedia","pause","play","handleProgressBarClick","getMediaCurrentTime","handlePictureInPicture","pictureInPictureElement","exitPictureInPicture","catch","requestPictureInPicture","alert","getProgressBarMax","getProgressBarValue","hotKeys","previewIsDisplayed","hookSeek","hookPlayMedia","hookIsPlaying","mediaDuration","progressBar","styles","controlsSection","mediaUrl","topSection","hotkeys","VideoPlayer","handlePlayMedia","isDisplayed","playsInline","src","onTimeUpdate","data-testid","onLoadedData","onLoadedDataGetDuration","ref","videoEl","preload","display","Toggle","switchContainer","switch","defaultChecked","defaultValue","handleToggle","slider","TimecodeOffset","resetTimecodeOffset","handleSetTimecodeOffset","setTimecodeOffset","offsetContainer","inputBox","button","Settings","settings","header","closeButton","handleSettingsToggle","icon","faWindowClose","controlsContainer","settingElement","defaultValuePauseWhileTyping","handlePauseWhileTyping","defaultValueScrollSync","handleIsScrollIntoViewChange","rollbackValue","step","defaultRollBackValueInSeconds","handleRollBackValueInSeconds","handleShowTimecodes","handleShowSpeakers","handlePreviewIsDisplayed","timecodeLabel","KeyboardShortcuts","hotKeysCheatsheet","keys","shortcut","listItem","shortcutLabel","shortcuts","handleShortcutsToggle","Header","showSettings","showShortcuts","showExportOptions","exportOptions","tooltip","nav","mediaControls","ExportOptions","btns","exportOptionsList","opt","playerButton","handleExportOptionsChange","handleExportToggle","helpMessage","faMousePointer","faICursor","faUserEdit","faKeyboard","faSave","help","faQuestionCircle","TranscriptEditor","componentDidMount","updateDimensions","addEventListener","gridDisplay","gridTemplateColumns","gridColumnGap","displayMedia","mediaType","documentElement","clientWidth","innerWidth","handleTimeUpdate","handleIsPlaying","isPauseWhileTypingOn","rollBackValue","timedTextEditorRef","forceUpdate","fileName","getEditorContent","tmpData","JSON","stringify","contentType","link","Blob","body","appendChild","removeChild","currentDuration","currentDurationWithOffset","durationInSeconds","handleChangePreviewViewWidth","newPreviewViewWidth","previewViewWidth","handleRemove","newList","sentSelected","numWordSelected","numWordRecommendStr","createRef","summaryLength","analyticsEvents","summaryInput","videoPlayer","foo","contentFormat","timedTextEditor","now","container","grid","row","aside","paddingLeft","color","rows","cols","minlength","padding","mainWithAudiio","main","App","loadVideo","transcriptData_","getElementById","mediaUrl_","title_","fetch","res","sttType","isTextEditable","autoSaveData","autoSaveExtension","transcriptEditorRef","Boolean","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.04061f11.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProgressBar_wrapper__2sHhL\",\"bar\":\"ProgressBar_bar__2rKBI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"settings_settings__AdO6f\",\"header\":\"settings_header__c3Jc0\",\"closeButton\":\"settings_closeButton__Jtol5\",\"controlsContainer\":\"settings_controlsContainer__1Gt4w\",\"settingElement\":\"settings_settingElement__1JxjQ\",\"label\":\"settings_label__19tSW\",\"rollbackValue\":\"settings_rollbackValue__1PZun\",\"timecodeLabel\":\"settings_timecodeLabel__YhjC-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"transcript-editor_container__3hdJZ\",\"main\":\"transcript-editor_main__3DGq4\",\"mainWithAudiio\":\"transcript-editor_mainWithAudiio__3HnA-\",\"help\":\"transcript-editor_help__29Bsr\",\"helpMessage\":\"transcript-editor_helpMessage__3r62M\",\"settingsButton\":\"transcript-editor_settingsButton__3l9kS\",\"icon\":\"transcript-editor_icon__2dGb9\",\"aside\":\"transcript-editor_aside__2AmOZ\",\"settingsContainer\":\"transcript-editor_settingsContainer__2l_VH\",\"grid\":\"transcript-editor_grid__24fjN\",\"row\":\"transcript-editor_row__1-gs_\",\"keyboardShortcutsButon\":\"transcript-editor_keyboardShortcutsButon__29Ao4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DraftEditor-root\":\"timed-text-editor_DraftEditor-root__fFyJE\",\"editor\":\"timed-text-editor_editor__2nhWu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playerControls\":\"PlayerControls_playerControls__3k5i8\",\"playerButton\":\"PlayerControls_playerButton__f4oZ5\",\"playBackRate\":\"PlayerControls_playBackRate__1I_Tx\",\"timeBox\":\"PlayerControls_timeBox__JSqhF\",\"currentTime\":\"PlayerControls_currentTime__19qr3\",\"separator\":\"PlayerControls_separator__1iH51\",\"duration\":\"PlayerControls_duration__3u5sn\",\"btnsGroup\":\"PlayerControls_btnsGroup__2KJb3\",\"pip\":\"PlayerControls_pip__2UFjK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectPlayerControl\":\"Select_selectPlayerControl__OgWvy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"videoEl\":\"video-player_videoEl__3PDdn\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './index.scss';\n\nexport default Comp => () => (\n  <div className=\"example-warper\">\n    <Comp />\n  </div>\n);\n","// import React from 'react';\n// import PropTypes from 'prop-types';\n//\n// class Modal extends React.Component {\n//   render() {\n//     // Render nothing if the \"show\" prop is false\n//     if(!this.props.show) {\n//       return null;\n//     }\n//\n//     // The gray background\n//     const backdropStyle = {\n//       position: 'fixed',\n//       top: 0,\n//       bottom: 0,\n//       left: 0,\n//       right: 0,\n//       backgroundColor: 'rgba(0,0,0,0.3)',\n//       padding: 50\n//     };\n//\n//     // The modal \"window\"\n//     const modalStyle = {\n//       backgroundColor: '#fff',\n//       borderRadius: 5,\n//       maxWidth: 500,\n//       minHeight: 300,\n//       margin: '0 auto',\n//       padding: 30\n//     };\n//\n//     return (\n//       <div className=\"backdrop\" style={backdropStyle}>\n//         <div className=\"modal\" style={modalStyle}>\n//           {this.props.children}\n//\n//           <div className=\"footer\">\n//             <button onClick={this.props.onClose}>\n//               Close\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n//\n// Modal.propTypes = {\n//   onClose: PropTypes.func.isRequired,\n//   show: PropTypes.bool,\n//   children: PropTypes.node\n// };\n//\n// export default Modal;\n\nimport React from 'react';\nimport Warper from './Warper';\nimport Popup from \"reactjs-popup\";\n\nconst contentStyle = {\n  maxWidth: '1200px',\n  width: '90%',\n};\n\nconst CustomModal = () => (\n  <Popup\n    trigger={\n      <button type=\"button\" className=\"button\">\n        {' '}\n        Click to View Instructions{' '}\n      </button>\n    }\n    modal\n    lockScroll={false}\n    contentStyle={contentStyle}>\n    {close => (\n      <div className=\"modal\">\n        <a className=\"close\" onClick={close}>\n          &times;\n        </a>\n        <div className=\"content\">\n          <div class=\"col-12\" id=\"actualInstructions\">\n            <h2>Tasks</h2>\n            <dl>\n              <dt>Task A - Select sentences that best summarize a 5 minute video</dt>\n              <p>👉<em>Read</em> the whole transcript and <em>select</em> sentences that represent the main idea of the transcript as best as possible.</p>\n              <dd>\n                <ol>\n                  <li>Select <em>at least ONE</em> sentence from the transcript. <em>Choosing 3 to 7 sentences</em> (or more if necessary) is recommended.</li>\n                  <li>The selected sentences should be closely related to your written summary in Task B.</li>\n                </ol>\n              </dd>\n\n              <dt>Task B - Write a short summary in your own words</dt>\n              <dd>👉<em>Write</em> a short summary in your own words (1~2 sentences recommended) in the summary box based on your selected sentences.</dd>\n            </dl>\n\n            <h2>Notes</h2>\n              <ol>\n                  <li>\n                    The title of the video is shown on the top of the transcript.\n                  </li>\n                  <li>\n                    We only care about the transcribed parts of the video. If the video is longer that 5 minutes, you should do your tasks based on the shown transcript and corresponding video content.\n                  </li>\n                  <li>\n                    You do NOT need to watch the entire 5 minute long video if you can do your task by only reading the transcript. The video is to help you understand the context of the transcript.\n                  </li>\n              </ol>\n\n            <h2>Caveats</h2>\n              <ul>\n                  <li>\n                    Some videos are not available. In that case, please do the tasks based only on the transcripts.\n                  </li>\n                  <li>\n                    Please skip the tasks if the transcripts are not related to the video content (and let us know).\n                  </li>\n              </ul>\n\n            <h2>Video Player Control</h2>\n              <ul>\n                  <li>\n                      By click a timestamp, you can jump to that exact time in the video, which is provided to help you understand the context.\n                  </li>\n                  <li>\n                    Clicking the video area enables play or pause the video.\n                  </li>\n              </ul>\n          </div>\n        </div>\n      </div>\n    )}\n  </Popup>\n);\n\nexport default Warper(CustomModal);\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nclass CheckBox extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isChecked: false\n    };\n    this.handleChecked = this.handleChecked.bind(this);\n  }\n\n  getWordCount = () => {\n    // console.log(this.props.text)\n    const plainText = this.props.text;\n    const regex = /(?:\\r\\n|\\r|\\n)/g; // new line, carriage return, line feed\n    const cleanString = plainText.replace(regex, \" \").trim(); // replace above characters w/ space\n    const wordArray = cleanString.match(/\\S+/g); // matches words according to whitespace\n\n    return wordArray ? wordArray.length : 0;\n  };\n\n  handleChecked = () => {\n    this.setState({isChecked: !this.state.isChecked});\n    const nWord = this.getWordCount();\n\n    // console.log(this.state.isChecked, nWord)\n\n    if (this.props.handleNumWord) {\n      if (this.state.isChecked) {\n        this.props.handleNumWord({\n          category: 'CheckBox',\n          action: 'removeSelection',\n          sent: this.props.name,\n          value: -nWord\n        });\n      } else {\n        this.props.handleNumWord({\n          category: 'CheckBox',\n          action: 'addSelection',\n          sent: this.props.name,\n          value: nWord\n        });\n      }\n\n\n    }\n  };\n\n\n\n  render() {\n    return (\n      <span className=\"segmentCheckbox\">\n        <input\n          type=\"checkbox\"\n          id={this.props.name} name={this.props.name} value={this.props.name}\n          onChange={this.handleChecked}\n          style={{ marginRight: \"8px\", verticalAlign: \"middle\" }}/>\n        <label for={this.props.name}\n          style={{ fontSize: \"13px\" }}>{this.props.name}</label>\n      </span>\n    );\n  }\n}\n\nCheckBox.propTypes = {\n  name: PropTypes.string,\n  // handleOnChange: PropTypes.func,\n  text: PropTypes.string,\n  handleNumWord: PropTypes.func,\n};\n\nexport default CheckBox;\n","/**\n* Raised in this comment https://github.com/bbc/react-transcript-editor/pull/9\n* abstracted from https://github.com/bbc/newslabs-cdn/blob/master/js/20-bbcnpf.utils.js\n* In broadcast VIDEO, timecode is NOT hh:mm:ss:ms, it's hh:mm:ss:ff where ff is frames,\n* dependent on the framerate of the media concerned.\n* `hh:mm:ss:ff`\n*/\n\n/**\n * Helper function\n * Rounds to the 14milliseconds boundaries\n * Time in video can only \"exist in\" 14milliseconds boundaries.\n * This makes it possible for the HTML5 player to be frame accurate.\n * @param {*} seconds\n * @param {*} fps\n */\nconst normalisePlayerTime = function (seconds, fps) {\n  return Number((1.0 / fps * Math.floor(Number((fps * seconds).toPrecision(12)))).toFixed(2));\n};\n\n/*\n* @param {*} seconds\n* @param {*} fps\n*/\nconst secondsToTimecode = function (seconds, framePerSeconds) {\n  // written for PAL non-drop timecode\n  let fps = 25;\n  if (framePerSeconds !== undefined) {\n    fps = framePerSeconds;\n  }\n\n  const normalisedSeconds = normalisePlayerTime(seconds, fps);\n\n  const wholeSeconds = Math.floor(normalisedSeconds);\n  const frames = ((normalisedSeconds - wholeSeconds) * fps).toFixed(2);\n\n  // prepends zero - example pads 3 to 03\n  function _padZero(n) {\n    if (n < 10) return `0${ parseInt(n) }`;\n\n    return parseInt(n);\n  }\n\n  return `${ _padZero((wholeSeconds / 60 / 60) % 60)\n  }:${\n    _padZero((wholeSeconds / 60) % 60)\n  }:${\n    _padZero(wholeSeconds % 60)\n  }:${\n    _padZero(frames) }`;\n};\n\nexport default secondsToTimecode;\n","/**\n * Helperf unction\n * @param {*} tc\n * @param {*} fps\n */\nconst timecodeToFrames = function (tc, fps) {\n  // TODO make 29.97 fps drop-frame aware - works for 25 only.\n\n  const s = tc.split(':');\n  let frames = parseInt(s[3]);\n  frames += parseInt(s[2]) * fps;\n  frames += parseInt(s[1]) * (fps * 60);\n  frames += parseInt(s[0]) * (fps * 60 * 60);\n\n  return frames;\n};\n\n/**\n * Convert broadcast timecodes to seconds\n * @param {*} tc - `hh:mm:ss:ff`\n * @param {*} framePerSeconds - defaults to 25 if not provided\n */\nconst timecodeToSecondsHelper = function (tc, framePerSeconds) {\n  let fps = 25;\n  if (framePerSeconds !== undefined) {\n    fps = framePerSeconds;\n  }\n  const frames = timecodeToFrames(tc, fps);\n\n  return Number(Number(frames / fps).toFixed(2));\n};\n\nexport default timecodeToSecondsHelper;\n","const countColon = timecode => timecode.split(':').length;\n\nconst includesFullStop = timecode => timecode.includes('.');\n\nconst isOneDigit = str => str.length === 1;\n\nconst padTimeToTimecode = (time) => {\n  if (typeof time === 'string') {\n    switch (countColon(time)) {\n    case 4:\n      // is already in timecode format\n      // hh:mm:ss:ff\n      return time;\n    case 2:\n      // m:ss\n      if (isOneDigit(time.split(':')[0])) {\n        return `00:0${ time }:00`;\n      }\n\n      return `00:${ time }:00`;\n    case 3:\n      // hh:mm:ss\n      return `${ time }:00`;\n    default:\n      // mm.ss\n      if (includesFullStop(time)) {\n        // m.ss\n        if (isOneDigit(time.split('.')[0])) {\n          return `00:0${ time.split('.')[0] }:${ time.split('.')[1] }:00`;\n        }\n\n        return `00:${ time.replace('.', ':') }:00`;\n      }\n\n      // if just int, then it's seconds\n      // s\n      if (isOneDigit(time)) {\n        return `00:00:0${ time }:00`;\n      }\n\n      return `00:00:${ time }:00`;\n    }\n    // edge case if it's number return a number coz cannot refactor\n    // TODO: might need to refactor and move this elsewhere\n  } else {\n    return time;\n  }\n};\n\nexport default padTimeToTimecode;\n","/**\n * Wrapping around \"time stamps\" and timecode conversion modules\n * To provide more support for variety of formats.\n */\nimport secondsToTimecode from './src/secondsToTimecode';\nimport timecodeToSecondsHelper from './src/timecodeToSeconds';\nimport padTimeToTimecode from './src/padTimeToTimecode';\n\n/**\n * @param {*} time\n * Can take as input timecodes in the following formats\n * - hh:mm:ss:ff\n * - mm:ss\n * - m:ss\n * - ss - seconds --> if it's already in seconds then it just returns seconds\n * - hh:mm:ff\n * @todo could be refactored with some helper functions for clarity\n */\nconst timecodeToSeconds = (time) => {\n  if (typeof time === 'string') {\n    const resultPadded = padTimeToTimecode(time);\n    const resultConverted = timecodeToSecondsHelper(resultPadded);\n\n    return resultConverted;\n  }\n\n  // assuming it receive timecode as seconds as string '600'\n  return parseFloat(time);\n};\n\nconst shortTimecode = (time) => {\n  const timecode = secondsToTimecode(time);\n\n  return timecode.slice(0, -3);\n};\n\nexport { secondsToTimecode, timecodeToSeconds, shortTimecode };\n","import React from 'react';\nimport {\n  convertFromRaw,\n  convertToRaw\n } from 'draft-js';\n\nimport CheckBox from './CheckBox';\n\nimport {\n  shortTimecode,\n  secondsToTimecode\n} from '../../util/timecode-converter';\n\nimport style from './WrapperBlock.module.css';\n\nimport newID from './newid';\n\nconst updateSpeakerName = (oldName, newName, state) => {\n  const contentToUpdate = convertToRaw(state);\n\n  contentToUpdate.blocks.forEach(block => {\n    if (block.data.speaker === oldName) {\n      block.data.speaker = newName;\n    }\n  })\n\n  return convertFromRaw(contentToUpdate);\n}\n\n\nclass WrapperBlock extends React.Component { // React.Component\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      speaker: '',\n      start: 0,\n      timecodeOffset: this.props.blockProps.timecodeOffset\n    };\n  }\n\n\n  componentDidMount() {\n    const { block } = this.props;\n    const speaker = block.getData().get('speaker');\n    const start = block.getData().get('start');\n\n    // console.log(speaker, start)\n\n    this.setState({\n      speaker: speaker,\n      start: start\n    });\n  }\n\n  // reducing unnecessary re-renders\n  shouldComponentUpdate = (nextProps, nextState) => {\n    if (nextProps.block.getText() !== this.props.block.getText()) {\n      return true;\n    }\n\n    if (nextProps.blockProps.showSpeakers !== this.props.blockProps.showSpeakers) {\n      return true;\n    }\n\n    if (nextProps.blockProps.showTimecodes !== this.props.blockProps.showTimecodes) {\n      return true;\n    }\n\n    if (nextProps.blockProps.timecodeOffset !== this.props.blockProps.timecodeOffset) {\n      return true;\n    }\n\n    if (nextState.speaker !== this.state.speaker) {\n      return true;\n    }\n\n    if (nextProps.blockProps.isEditable !== this.props.blockProps.isEditable) {\n      return true;\n    }\n\n    if (nextProps.block.getData().get('speaker') !== this.state.speaker) {\n      return true;\n    }\n    return false;\n  };\n\n\n  handleTimecodeClick = () => {\n    this.props.blockProps.onWordClick(this.state.start);\n    if (this.props.blockProps.handleAnalyticsEvents) {\n      this.props.blockProps.handleAnalyticsEvents({\n        category: 'WrapperBlock',\n        action: 'handleTimecodeClick',\n        name: 'onWordClick',\n        value: secondsToTimecode(this.state.start)\n      });\n    }\n  };\n\n  // getWordCount = () => {\n  //   console.log(this.props.block.text)\n  //   const plainText = this.props.block.text;\n  //   const regex = /(?:\\r\\n|\\r|\\n)/g; // new line, carriage return, line feed\n  //   const cleanString = plainText.replace(regex, \" \").trim(); // replace above characters w/ space\n  //   const wordArray = cleanString.match(/\\S+/g); // matches words according to whitespace\n  //\n  //   return wordArray ? wordArray.length : 0;\n  // };\n  //\n  // handleChecked = () => {\n  //   this.setState({isChecked: !this.state.isChecked});\n  //   const nWord = this.getWordCount();\n  //\n  //   console.log(this.state.isChecked, nWord)\n  //\n  //   if (this.props.blockProps.handleAnalyticsEvents && this.state.isChecked) {\n  //     this.props.blockProps.handleAnalyticsEvents({\n  //       category: 'WrapperBlock',\n  //       action: 'handleOnChangeCheckBox',\n  //       name: 'getWordCount',\n  //       value: nWord\n  //     });\n  //   }\n  // };\n  //\n  // handleOnChange = event => {\n  //   this.setState({isChecked: event.value});\n  //   let nWord = this.getWordCount;\n  //\n  //   if (this.props.blockProps.handleAnalyticsEvents && this.state.isChecked) {\n  //     this.props.blockProps.handleAnalyticsEvents({\n  //       category: 'WrapperBlock',\n  //       action: 'handleOnChangeCheckBox',\n  //       name: 'getWordCount',\n  //       value: nWord\n  //     });\n  //   }\n  // };\n\n  render() {\n    let startTimecode = this.state.start;\n    if (this.props.blockProps.timecodeOffset) {\n      startTimecode += this.props.blockProps.timecodeOffset;\n    }\n    const timecodeElement = (\n      <span className={ style.time } onClick={ this.handleTimecodeClick }>\n        {shortTimecode(startTimecode)}\n      </span>\n    );\n\n    const sentenceLabel = () => {\n      const speaker = this.props.block.getData().get('speaker') || \"\"\n      const suffix = speaker.split(' ')[1];\n      return `sentence-${suffix}`;\n    }\n\n// handleOnChange={this.handleChecked}\n    return (\n      <div className={ style.WrapperBlock }>\n        <div className={ [ style.markers, style.unselectable ].join(' ') } contentEditable={ false }>\n          <CheckBox\n            name={`${sentenceLabel()}`}\n            text={this.props.block.text}\n            handleNumWord={this.props.blockProps.handleNumWord}\n          />\n          {this.props.blockProps.showTimecodes ? timecodeElement : ''}\n        </div>\n        <div className={ style.text }>\n          {this.props.block.text}\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default WrapperBlock;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Editor } from \"draft-js\";\n\n\nimport WrapperBlock from './WrapperBlock';\n\n// NOTE: custom editor is in a separate class to minimise re-renders\n// if considering refactoring, removing the separate class, please double check\n// that doing so does not introduce uncessary re-renders first.\nclass CustomEditor extends React.Component {\n  handleWordClick = e => {\n    this.props.onWordClick(e);\n  };\n\n  renderBlockWithTimecodes = () => {\n    return {\n      component: WrapperBlock,\n      editable: false,\n      props: {\n        showSpeakers: this.props.showSpeakers,\n        showTimecodes: this.props.showTimecodes,\n        timecodeOffset: this.props.timecodeOffset,\n        editorState: this.props.editorState,\n        setEditorNewContentState: this.props.setEditorNewContentState,\n        setEditorNewContentStateSpeakersUpdate: this.props.setEditorNewContentStateSpeakersUpdate,\n        onWordClick: this.handleWordClick,\n        handleAnalyticsEvents: this.props.handleAnalyticsEvents,\n        isEditable: this.props.isEditable,\n        handleNumWord: this.props.handleNumWord,\n      }\n    };\n  };\n\n  shouldComponentUpdate(nextProps) {\n    // https://stackoverflow.com/questions/39182657/best-performance-method-to-check-if-contentstate-changed-in-draftjs-or-just-edi\n    if (nextProps.editorState !== this.props.editorState) {\n      return true;\n    }\n\n    if (nextProps.isEditable !== this.props.isEditable) {\n      return true;\n    }\n\n    return false;\n  }\n\n  handleOnChange = e => {\n    this.props.onChange(e);\n  };\n\n  render() {\n    return (\n      <Editor\n        editorState={this.props.editorState}\n        onChange={this.handleOnChange}\n        stripPastedStyles\n        blockRendererFn={this.renderBlockWithTimecodes}\n        handleKeyCommand={this.props.handleKeyCommand}\n        keyBindingFn={this.props.customKeyBindingFn}\n        spellCheck={this.props.spellCheck}\n      />\n    );\n  }\n}\n\nexport default CustomEditor;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Word extends Component {\n\n  shouldComponentUpdate(nextProps) {\n    if ( nextProps.decoratedText !== this.props.decoratedText) {\n      return true;\n    }\n\n    return false;\n  }\n\n  generateConfidence = (data) => {\n    // handling edge case where confidence score not present\n    if (data.confidence) {\n      return data.confidence > 0.6 ? 'high' : 'low';\n    }\n\n    return 'high';\n  }\n\n  generatePreviousTimes = (data) => {\n    let prevTimes = '';\n\n    for (let i = 0; i < data.start; i++) {\n      prevTimes += `${ i } `;\n    }\n\n    if (data.start % 1 > 0) {\n      // Find the closest quarter-second to the current time, for more dynamic results\n      const dec = Math.floor((data.start % 1) * 4.0) / 4.0;\n      prevTimes += ` ${ Math.floor(data.start) + dec }`;\n    }\n\n    return prevTimes;\n  }\n\n  render() {\n    const data = this.props.entityKey\n      ? this.props.contentState.getEntity(this.props.entityKey).getData()\n      : {};\n\n    return (\n      <span\n        data-start={ data.start }\n        data-end={ data.end }\n        data-confidence = { this.generateConfidence(data) }\n        data-prev-times = { this.generatePreviousTimes(data) }\n        data-entity-key={ data.key }\n        className=\"Word\">\n        {this.props.children}\n      </span>\n    );\n  }\n}\n\nWord.propTypes = {\n  contentState: PropTypes.object,\n  entityKey: PropTypes.string,\n  children: PropTypes.array\n};\n\nexport default Word;\n","/**\n * Helper function to generate draft.js entities,\n * see unit test for example data structure\n * it adds offset and length to recognise word in draftjs\n */\n\n/**\n*  @param {json} words  - List of words\n*  @param {string} wordAttributeName - eg 'punct' or 'text' or etc.\n* attribute for the word object containing the text. eg word ={ punct:'helo', ... }\n*  or eg word ={ text:'helo', ... }\n*/\nconst generateEntitiesRanges = (words, wordAttributeName) => {\n  let position = 0;\n\n  return words.map((word) => {\n    const result = {\n      start: word.start,\n      end: word.end,\n      confidence: word.confidence,\n      text: word[wordAttributeName],\n      offset: position,\n      length: word[wordAttributeName].length,\n      key: Math.random()\n        .toString(36)\n        .substring(6),\n    };\n    // increase position counter - to determine word offset in paragraph\n    position = position + word[wordAttributeName].length + 1;\n\n    return result;\n  });\n};\n\nexport default generateEntitiesRanges;\n","/**\nedge cases\n- more segments then words - not an issue if you start by matching words with segment\nand handle edge case where it doesn't find a match\n- more words then segments - orphan words\n */\nfunction groupWordsInParagraphsBySpeakers(words, segments) {\n  // add speakers to each word\n  const wordsWithSpeakers = addSpeakerToEachWord(words, segments.segments);\n  // group words by speakers sequentially\n  const result = groupWordsBySpeaker(wordsWithSpeakers);\n\n  return result;\n};\n\n/**\n* Add speakers to each words\n* if it doesn't have add unknown attribute `U_UKN`\n* @param {*} words\n* @param {*} segments\n*/\nfunction addSpeakerToEachWord(words, segments) {\n  const tmpWordsWithSpeakers = [];\n  words.forEach((word) => {\n    const tmpSpeakerSegment = findSegmentForWord(word, segments);\n\n    word.speaker = formatSpeakerName(tmpSpeakerSegment.speaker);\n    tmpWordsWithSpeakers.push(word);\n  });\n\n  return tmpWordsWithSpeakers;\n}\n\n/**\n * Groups Words by speaker attribute\n * @param {array} wordsWithSpeakers - same as kaldi words list but with a `speaker` label attribute on each word\n * @return {array} - list of paragraph objcts, with words, text and sepaker attributes.\n * where words is an array and the other two are strings.\n */\nfunction groupWordsBySpeaker(wordsWithSpeakers) {\n  let currentSpeaker = wordsWithSpeakers[0].speaker;\n  const results = [ ];\n  let paragraph = { words: [], text: '', speaker: ''};\n  wordsWithSpeakers.forEach((word) => {\n    // if current speaker same as word speaker add words to paragraph\n    if (currentSpeaker === word.speaker) {\n      paragraph.words.push(word);\n      paragraph.text += word.punct + ' ';\n      paragraph.speaker = currentSpeaker;\n    }\n    // if it's not same speaker\n    else {\n      // update current speaker\n      currentSpeaker = word.speaker;\n      // remove spacing in text\n      paragraph.text = paragraph.text.trim();\n      //save  previous paragraph\n      results.push(paragraph);\n      // reset paragraph\n      paragraph = { words: [], text: '', speaker: 'U_UKN'};\n      // add words attributes to new\n      paragraph.words.push(word);\n      paragraph.text += word.punct + ' ';\n    }\n  });\n  // add last paragraph\n  results.push(paragraph);\n\n  return results;\n}\n\n/**\n* Helper functions\n*/\n\n/**\n* given word start and end time attributes\n* looks for segment range that contains that word\n* if it doesn't find any it returns a segment with `UKN`\n* speaker attributes.\n* @param {object} word - word object\n* @param {array} segments - list of segments objects\n* @return {object} - a single segment whose range contains the word\n*/\nfunction findSegmentForWord(word, segments) {\n\n  const tmpSegment = segments.find((seg) => {\n    const segEnd = seg.start + seg.duration;\n\n    return ((word.start >= seg.start) && (word.end <= segEnd));\n  });\n  // if find doesn't find any matches it returns an undefined\n  if (tmpSegment === undefined) {\n    // covering edge case orphan word not belonging to any segments\n    // adding UKN speaker label\n    return {\n      '@type': 'Segment',\n      // keeping both speaker id and gender as this is used later\n      // to format speaker label combining the two\n      speaker: { '@id': 'UKN', gender: 'U' }\n    };\n  } else {\n    // find returns the first element that matches the criteria\n    return tmpSegment;\n  }\n}\n\n/**\n* formats kaldi speaker object into a string\n* Combining Gender and speaker Id\n* @param {object} speaker - BBC kaldi speaker object\n* @return {string} -\n*/\nfunction formatSpeakerName(speaker) {\n  return speaker.gender + '_' + speaker['@id'];\n}\n\nexport default groupWordsInParagraphsBySpeakers;\n","/**\n * Convert BBC Kaldi json to draftJs\n * see `sample` folder for example of input and output as well as `example-usage.js`\n *\n */\n\nimport generateEntitiesRanges from '../generate-entities-ranges/index.js';\nimport groupWordsInParagraphsBySpeakers from './group-words-by-speakers.js';\n/**\n * groups words list from kaldi transcript based on punctuation.\n * @todo To be more accurate, should introduce an honorifics library to do the splitting of the words.\n * @param {array} words - array of words opbjects from kaldi transcript\n */\n\nconst groupWordsInParagraphs = words => {\n  const results = [];\n  let paragraph = { words: [], text: [] };\n\n  words.forEach(word => {\n    // if word contains punctuation\n    if (/[.?!]/.test(word.punct)) {\n      paragraph.words.push(word);\n      paragraph.text.push(word.punct);\n      paragraph.text = paragraph.text.join(' ');\n      results.push(paragraph);\n      // reset paragraph\n      paragraph = { words: [], text: [] };\n    } else {\n      paragraph.words.push(word);\n      paragraph.text.push(word.punct);\n    }\n  });\n\n  return results;\n};\n\nconst bbcKaldiToDraft = bbcKaldiJson => {\n  const results = [];\n  let tmpWords;\n  let speakerSegmentation = null;\n  let wordsByParagraphs = [];\n\n  // BBC Octo Labs API Response wraps Kaldi response around retval,\n  // while kaldi contains word attribute at root\n  if (bbcKaldiJson.retval !== undefined) {\n    tmpWords = bbcKaldiJson.retval.words;\n    if (bbcKaldiJson.retval.segmentation !== undefined) {\n      speakerSegmentation = bbcKaldiJson.retval.segmentation;\n    }\n  } else {\n    tmpWords = bbcKaldiJson.words;\n    if (bbcKaldiJson.segmentation !== undefined) {\n      speakerSegmentation = bbcKaldiJson.segmentation;\n    }\n  }\n\n  if (speakerSegmentation === null) {\n    wordsByParagraphs = groupWordsInParagraphs(tmpWords);\n  } else {\n    wordsByParagraphs = groupWordsInParagraphsBySpeakers(tmpWords, speakerSegmentation);\n  }\n\n  wordsByParagraphs.forEach((paragraph, i) => {\n    // if paragraph contain words\n    // eg sometimes the speaker segmentation might not contain words :man-shrugging:\n    if (paragraph.words[0] !== undefined) {\n      let speakerLabel = `TBC ${ i }`;\n      if (speakerSegmentation !== null) {\n        speakerLabel = paragraph.speaker;\n      }\n\n      const draftJsContentBlockParagraph = {\n        text: paragraph.text,\n        type: 'paragraph',\n        data: {\n          speaker: speakerLabel,\n          words: paragraph.words,\n          start: paragraph.words[0].start,\n          checked: false\n        },\n        // the entities as ranges are each word in the space-joined text,\n        // so it needs to be compute for each the offset from the beginning of the paragraph and the length\n        entityRanges: generateEntitiesRanges(paragraph.words, 'punct') // wordAttributeName\n      };\n      results.push(draftJsContentBlockParagraph);\n    }\n  });\n\n  return results;\n};\n\nexport default bbcKaldiToDraft;\n","/**\n * Convert autoEdit2 Json to draftJS\n * see `sample` folder for example of input and output as well as `example-usage.js`\n */\n\nimport generateEntitiesRanges from '../generate-entities-ranges/index';\n\n/**\n * groups words list from autoEdit transcript based on punctuation.\n * @todo To be more accurate, should introduce an honorifics library to do the splitting of the words.\n * @param {array} words - array of words objects from autoEdit transcript\n */\n\nconst groupWordsInParagraphs = (autoEditText) => {\n  const results = [];\n  let paragraph = { words: [], text: [] };\n\n  autoEditText.forEach((autoEditparagraph) => {\n    autoEditparagraph.paragraph.forEach((autoEditLine) => {\n      autoEditLine.line.forEach((word) => {\n        // adjusting time reference attributes from\n        // `startTime` `endTime` to `start` `end`\n        // for word object\n        const tmpWord = {\n          text: word.text,\n          start: word.startTime,\n          end: word.endTime,\n        };\n        //  if word contains punctuation\n        if (/[.?!]/.test(word.text)) {\n          paragraph.words.push(tmpWord);\n          paragraph.text.push(word.text);\n          results.push(paragraph);\n          // reset paragraph\n          paragraph = { words: [], text: [] };\n        } else {\n          paragraph.words.push(tmpWord);\n          paragraph.text.push(word.text);\n        }\n      });\n    });\n  });\n\n  return results;\n};\n\nconst autoEdit2ToDraft = (autoEdit2Json) => {\n  const results = [];\n  const tmpWords = autoEdit2Json.text;\n  const wordsByParagraphs = groupWordsInParagraphs(tmpWords);\n\n  wordsByParagraphs.forEach((paragraph, i) => {\n    const draftJsContentBlockParagraph = {\n      text: paragraph.text.join(' '),\n      type: 'paragraph',\n      data: {\n        speaker: `TBC ${ i }`,\n        words: paragraph.words,\n        start: paragraph.words[0].start\n      },\n      // the entities as ranges are each word in the space-joined text,\n      // so it needs to be compute for each the offset from the beginning of the paragraph and the length\n      entityRanges: generateEntitiesRanges(paragraph.words, 'text'),\n    };\n    // console.log(JSON.stringify(draftJsContentBlockParagraph,null,2))\n    results.push(draftJsContentBlockParagraph);\n  });\n\n  // console.log(JSON.stringify(results,null,2))\n  return results;\n};\n\nexport default autoEdit2ToDraft;\n","/**\n *  Convert Speechmatics Json to DraftJs\n *  see `sample` folder for example of input and output as well as `example-usage.js`\n */\n\nimport generateEntitiesRanges from '../generate-entities-ranges/index.js';\n\n/**\n * Determines the speaker of a paragraph by comparing the start time of the paragraph with\n * the speaker times.\n * @param {float} start - Starting point of paragraph\n * @param {array} speakers - list of all speakers with start and end time\n */\nconst getSpeaker = (start, speakers) => {\n  for (var speakerIdx in speakers) {\n    const speaker = speakers[speakerIdx];\n    const segmentStart = parseFloat(start);\n    if (segmentStart >= speaker.start & segmentStart < speaker.end) {\n      return speaker.name;\n    }\n  }\n\n  return 'UNK';\n};\n\n/**\n * groups words list from speechmatics based on speaker change and paragraph length.\n * @param {array} words - array of words objects from speechmatics transcript\n * @param {array} speakers - array of speaker objects from speechmatics transcript\n * @param {int} words - number of words which trigger a paragraph break\n */\nconst groupWordsInParagraphs = (words, speakers, maxParagraphWords) => {\n  const results = [];\n  let paragraph = { words: [], text: [], speaker: '' };\n  let oldSpeaker = getSpeaker(words[0].start, speakers);\n  let newSpeaker;\n  let sentenceEnd = false;\n\n  words.forEach((word) => {\n    newSpeaker = getSpeaker(word.start, speakers);\n    // if speaker changes\n    if (newSpeaker !== oldSpeaker || (paragraph.words.length > maxParagraphWords && sentenceEnd)) {\n      paragraph.speaker = oldSpeaker;\n      results.push(paragraph);\n      oldSpeaker = newSpeaker;\n      // reset paragraph\n      paragraph = { words: [], text: [] };\n    }\n    paragraph.words.push(word);\n    paragraph.text.push(word.punct);\n    sentenceEnd = /[.?!]/.test(word.punct) ? true : false;\n  });\n\n  paragraph.speaker = oldSpeaker;\n  results.push(paragraph);\n\n  return results;\n};\n\n/**\n * Speechmatics treats punctuation as own words. This function merges punctuations with\n * the pevious word and adjusts the total duration of the word.\n * @param {array} words - array of words objects from speechmatics transcript\n */\nconst curatePunctuation = (words) => {\n  const curatedWords = [];\n  words.forEach((word) => {\n    if (/[.?!]/.test(word.name)) {\n      curatedWords[curatedWords.length - 1].name = curatedWords[curatedWords.length - 1].name + word.name;\n      curatedWords[curatedWords.length - 1].duration = (parseFloat(curatedWords[curatedWords.length - 1].duration) + parseFloat(word.duration)).toString();\n    } else {\n      curatedWords.push(word);\n    }\n  }\n  );\n\n  return curatedWords;\n};\n\nconst speechmaticsToDraft = (speechmaticsJson) => {\n  const results = [];\n\n  let tmpWords;\n  tmpWords = curatePunctuation(speechmaticsJson.words);\n  tmpWords = tmpWords.map((element, index) => {\n    return ({\n      start: element.time,\n      end: (parseFloat(element.time) + parseFloat(element.duration)).toString(),\n      confidence: element.confidence,\n      word: element.name.toLowerCase().replace(/[.?!]/g, ''),\n      punct: element.name,\n      index: index,\n    });\n  });\n\n  let tmpSpeakers;\n  tmpSpeakers = speechmaticsJson.speakers;\n  tmpSpeakers = tmpSpeakers.map((element) => {\n    return ({\n      start: parseFloat(element.time),\n      end: (parseFloat(element.time) + parseFloat(element.duration)),\n      name: element.name,\n    });\n  });\n\n  const wordsByParagraphs = groupWordsInParagraphs(tmpWords, tmpSpeakers, 150);\n\n  wordsByParagraphs.forEach((paragraph) => {\n    const paragraphStart = paragraph.words[0].start;\n    const draftJsContentBlockParagraph = {\n      text: paragraph.text.join(' '),\n      type: 'paragraph',\n      data: {\n        speaker: paragraph.speaker,\n        words: paragraph.words,\n        start: paragraphStart\n      },\n      // the entities as ranges are each word in the space-joined text,\n      // so it needs to be compute for each the offset from the beginning of the paragraph and the length\n      entityRanges: generateEntitiesRanges(paragraph.words, 'punct'), // wordAttributeName\n    };\n    results.push(draftJsContentBlockParagraph);\n  });\n\n  return results;\n};\n\nexport default speechmaticsToDraft;\n","export const groupWordsBySpeakerLabel = (words) => {\n  const groupedWords = [];\n  let currentSpeaker = '';\n  words.forEach((word) => {\n    if (word.speaker_label === currentSpeaker) {\n      groupedWords[groupedWords.length - 1].words.push(word);\n    } else {\n      currentSpeaker = word.speaker_label;\n      // start new speaker block\n      groupedWords.push({\n        speaker: word.speaker_label,\n        words: [ word ] });\n    }\n  });\n\n  return groupedWords;\n};\n\nexport const findSpeakerForWord = (word, segments) => {\n  const startTime = parseFloat(word.start_time);\n  const endTime = parseFloat(word.end_time);\n  const firstMatchingSegment = segments.find((seg) => {\n    return startTime >= parseFloat(seg.start_time) && endTime <= parseFloat(seg.end_time);\n  });\n  if (firstMatchingSegment === undefined) {\n    return 'UKN';\n  } else {\n    return firstMatchingSegment.speaker_label.replace('spk_', '');\n  }\n};\n\nconst addSpeakerLabelToWords = (words, segments) => {\n  return words.map(w => Object.assign(w, { 'speaker_label': findSpeakerForWord(w, segments) }));\n};\n\nexport const groupWordsBySpeaker = (words, speakerLabels) => {\n  const wordsWithSpeakers = addSpeakerLabelToWords(words, speakerLabels.segments);\n\n  return groupWordsBySpeakerLabel(wordsWithSpeakers);\n};","/**\n * Converts AWS Transcribe Json to DraftJs\n * see `sample` folder for example of input and output as well as `example-usage.js`\n */\n\nimport generateEntitiesRanges from '../generate-entities-ranges/index.js';\nimport { groupWordsBySpeaker } from './group-words-by-speakers';\n\nexport const stripLeadingSpace = word => {\n  return word.replace(/^\\s/, '');\n};\n\n/**\n *  @param {json} words  - List of words\n *  @param {string} wordAttributeName - eg 'punct' or 'text' or etc.\n * attribute for the word object containing the text. eg word ={ punct:'helo', ... }\n *  or eg word ={ text:'helo', ... }\n */\nexport const getBestAlternativeForWord = word => {\n  if (/punctuation/.test(word.type)) {\n    return Object.assign(word.alternatives[0], { confidence: 1 }); //Transcribe doesn't provide a confidence for punctuation\n  }\n  const wordWithHighestConfidence = word.alternatives.reduce(function(\n    prev,\n    current\n  ) {\n    return parseFloat(prev.confidence) > parseFloat(current.confidence)\n      ? prev\n      : current;\n  });\n\n  return wordWithHighestConfidence;\n};\n\n/**\n * Normalizes words so they can be used in\n * the generic generateEntitiesRanges() method\n **/\nconst normalizeWord = currentWord => {\n  const bestAlternative = getBestAlternativeForWord(currentWord);\n\n  return {\n    start: parseFloat(currentWord.start_time),\n    end: parseFloat(currentWord.end_time),\n    text: bestAlternative.content,\n    confidence: parseFloat(bestAlternative.confidence)\n  };\n};\n\nexport const appendPunctuationToPreviousWord = (punctuation, previousWord) => {\n  const punctuationContent = punctuation.alternatives[0].content;\n\n  return {\n    ...previousWord,\n    alternatives: previousWord.alternatives.map(w => ({\n      ...w,\n      content: w.content + stripLeadingSpace(punctuationContent)\n    }))\n  };\n};\n\nexport const mapPunctuationItemsToWords = words => {\n  const itemsToRemove = [];\n  const dirtyArray = words.map((word, index) => {\n    let previousWord = {};\n    if (word.type === 'punctuation') {\n      itemsToRemove.push(index - 1);\n      previousWord = words[index - 1];\n\n      return appendPunctuationToPreviousWord(word, previousWord);\n    } else {\n      return word;\n    }\n  });\n\n  return dirtyArray.filter((item, index) => {\n    return !itemsToRemove.includes(index);\n  });\n};\n\n/**\n * groups words list from amazon transcribe transcript based on punctuation.\n * @todo To be more accurate, should introduce an honorifics library to do the splitting of the words.\n * @param {array} words - array of words objects from kaldi transcript\n */\nconst groupWordsInParagraphs = words => {\n  const results = [];\n  let paragraph = {\n    words: [],\n    text: []\n  };\n  words.forEach((word) => {\n    const content = getBestAlternativeForWord(word).content;\n    const normalizedWord = normalizeWord(word);\n    if (/[.?!]/.test(content)) {\n      paragraph.words.push(normalizedWord);\n      paragraph.text.push(content);\n      results.push(paragraph);\n      // reset paragraph\n      paragraph = { words: [], text: [] };\n    } else {\n      paragraph.words.push(normalizedWord);\n      paragraph.text.push(content);\n    }\n  });\n\n  return results;\n};\n\nconst groupSpeakerWordsInParagraphs = (words, speakerLabels) => {\n  const wordsBySpeaker = groupWordsBySpeaker(words, speakerLabels);\n\n  return wordsBySpeaker.map((speakerGroup) => {\n    return {\n      words: speakerGroup.words.map(normalizeWord),\n      text: speakerGroup.words.map((w) => getBestAlternativeForWord(w).content),\n      speaker: speakerGroup.speaker\n    };\n  });\n};\n\nconst amazonTranscribeToDraft = amazonTranscribeJson => {\n  const results = [];\n  const tmpWords = amazonTranscribeJson.results.items;\n  const speakerLabels = amazonTranscribeJson.results.speaker_labels;\n  const wordsWithRemappedPunctuation = mapPunctuationItemsToWords(tmpWords);\n  const speakerSegmentation = typeof(speakerLabels) != 'undefined';\n\n  const wordsByParagraphs = speakerSegmentation ?\n    groupSpeakerWordsInParagraphs(wordsWithRemappedPunctuation, speakerLabels) :\n    groupWordsInParagraphs(\n      wordsWithRemappedPunctuation\n    );\n\n  wordsByParagraphs.forEach((paragraph, i) => {\n    const draftJsContentBlockParagraph = {\n      text: paragraph.text.join(' '),\n      type: 'paragraph',\n      data: {\n        speaker: paragraph.speaker ? `Speaker ${ paragraph.speaker }` : `TBC ${ i }`,\n        words: paragraph.words,\n        start: parseFloat(paragraph.words[0].start)\n      },\n      // the entities as ranges are each word in the space-joined text,\n      // so it needs to be compute for each the offset from the beginning of the paragraph and the length\n      entityRanges: generateEntitiesRanges(paragraph.words, 'text') // wordAttributeName\n    };\n    results.push(draftJsContentBlockParagraph);\n  });\n\n  return results;\n};\n\nexport default amazonTranscribeToDraft;\n","/**\n * Convert IBM json to draftJS\n * see `sample` folder for example of input and output as well as `example-usage.js`\n *\n */\nimport generateEntitiesRanges from '../generate-entities-ranges/index.js';\n\nconst ibmToDraft = ibmJson => {\n  // helper function to normalise IBM words at line level\n  const normalizeTimeStampsToWords = timestamps => {\n    return timestamps.map(ibmWord => {\n      return {\n        text: ibmWord[0],\n        start: ibmWord[1],\n        end: ibmWord[2]\n      };\n    });\n  };\n\n  //\n  const normalizeIBMWordsList = ibmResults => {\n    const normalisedResults = [];\n    ibmResults.forEach(result => {\n      // nested array to keep paragraph segmentation same as IBM lines\n      normalisedResults.push(normalizeTimeStampsToWords(result.alternatives[0].timestamps));\n      // TODO: can be revisited - as separate PR by flattening the array like this\n      // normalisedResults = normalisedResults.concact(normalizeTimeStampsToWords(result.alternatives[0].timestamps));\n      // addSpeakersToWords function would need adjusting as would be dealing with a 1D array instead of 2D\n      // if edge case, like in example file, that there's one speaker recognised through all of speaker segemtnation info\n      // could break into paragraph when is over a minute? at end of IBM line?\n      // or punctuation, altho IBM does not seem to provide punctuation?\n    });\n\n    return normalisedResults;\n  };\n\n  // TODO: could be separate file\n  const findSpeakerSegmentForWord = (word, speakerSegments) => {\n    const tmpSegment = speakerSegments.find(seg => {\n      const segStart = seg.from;\n      const segEnd = seg.to;\n\n      return ((word.start === segStart) && (word.end === segEnd));\n    });\n    // if find doesn't find any matches it returns an undefined\n    if (tmpSegment === undefined) {\n      // covering edge case orphan word not belonging to any segments\n      // adding UKN speaker label\n      return 'UKN';\n    } else {\n      // find returns the first element that matches the criteria\n      return `S_${ tmpSegment.speaker }`;\n    }\n  };\n  // add speakers to words\n  const addSpeakersToWords = (ibmWords, ibmSpeakers) => {\n    return ibmWords.map(lines => {\n      return lines.map(word => {\n\n        word.speaker = findSpeakerSegmentForWord(word, ibmSpeakers);\n\n        return word;\n      });\n    });\n  };\n\n  const ibmNormalisedWordsToDraftJs = (ibmNormalisedWordsWithSpeakers) => {\n    const draftJsParagraphsResults = [];\n    ibmNormalisedWordsWithSpeakers.forEach((ibmParagraph) => {\n      const draftJsContentBlockParagraph = {\n        text: ibmParagraph.map((word) => {return word.text;}).join(' '),\n        type: 'paragraph',\n        data: {\n          // Assuming each paragraph in IBM line is the same\n          // for context it just seems like the IBM data structure gives you word level speakers,\n          // but also gives you \"lines\" so assuming each word in a line has the same speaker.\n          speaker: ibmParagraph[0].speaker,\n          words: ibmParagraph,\n          start: ibmParagraph[0].start\n        },\n        // the entities as ranges are each word in the space-joined text,\n        // so it needs to be compute for each the offset from the beginning of the paragraph and the length\n        entityRanges: generateEntitiesRanges(ibmParagraph, 'text'), // wordAttributeName\n      };\n      draftJsParagraphsResults.push(draftJsContentBlockParagraph);\n    });\n\n    return draftJsParagraphsResults;\n  };\n\n  const normalisedWords = normalizeIBMWordsList(ibmJson.results[0].results);\n  // TODO: nested array of words, to keep some sort of paragraphs, in case there's only one speaker\n  // can be refactored/optimised later\n  const ibmNormalisedWordsWithSpeakers = addSpeakersToWords(normalisedWords, ibmJson.results[0].speaker_labels);\n  const ibmDratJs = ibmNormalisedWordsToDraftJs(ibmNormalisedWordsWithSpeakers);\n\n  return ibmDratJs;\n};\n\nexport default ibmToDraft;\n","/**\n edge cases\n- more segments then words - not an issue if you start by matching words with segment\nand handle edge case where it doesn't find a match\n- more words then segments - orphan words?\n*\n* Takes in list of words and list of paragraphs (paragraphs have speakers info associated with it)\n```js\n{\n  \"words\": [\n    {\n      \"id\": 0,\n      \"start\": 13.02,\n      \"end\": 13.17,\n      \"text\": \"There\"\n    },\n    {\n      \"id\": 1,\n      \"start\": 13.17,\n      \"end\": 13.38,\n      \"text\": \"is\"\n    },\n    ...\n    ],\n  \"paragraphs\": [\n    {\n      \"id\": 0,\n      \"start\": 13.02,\n      \"end\": 13.86,\n      \"speaker\": \"TBC 00\"\n    },\n    {\n      \"id\": 1,\n      \"start\": 13.86,\n      \"end\": 19.58,\n      \"speaker\": \"TBC 1\"\n    },\n    ...\n  ]\n}\n```\n*  and returns a list of words grouped into paragraphs, with words, text and speaker attribute\n```js\n[\n  {\n    \"words\": [\n      {\n        \"id\": 0,\n        \"start\": 13.02,\n        \"end\": 13.17,\n        \"text\": \"There\"\n      },\n      {\n        \"id\": 1,\n        \"start\": 13.17,\n        \"end\": 13.38,\n        \"text\": \"is\"\n      },\n      {\n        \"id\": 2,\n        \"start\": 13.38,\n        \"end\": 13.44,\n        \"text\": \"a\"\n      },\n      {\n        \"id\": 3,\n        \"start\": 13.44,\n        \"end\": 13.86,\n        \"text\": \"day.\"\n      }\n    ],\n    \"text\": \"There is a day.\",\n    \"speaker\": \"TBC 00\"\n  },\n  ...\n]\n```\n */\nfunction groupWordsInParagraphsBySpeakers(words, segments) {\n  const result = addWordsToSpeakersParagraphs(words, segments);\n\n  return result;\n};\n\nfunction addWordsToSpeakersParagraphs (words, segments) {\n  const results = [];\n  let currentSegment = 'UKN';\n  let currentSegmentIndex = 0;\n  let previousSegmentIndex = 0;\n  let paragraph = { words: [], text: '', speaker: '' };\n  words.forEach((word) => {\n    currentSegment = findSegmentForWord(word, segments);\n    // if a segment exists for the word\n    if (currentSegment) {\n      currentSegmentIndex = segments.indexOf(currentSegment);\n      if (currentSegmentIndex === previousSegmentIndex) {\n        paragraph.words.push(word);\n        paragraph.text += word.text + ' ';\n        paragraph.speaker = currentSegment.speaker;\n      }\n      else {\n        previousSegmentIndex = currentSegmentIndex;\n        paragraph.text.trim();\n        results.push(paragraph);\n        paragraph = { words: [], text: '', speaker: '' };\n        paragraph.words.push(word);\n        paragraph.text += word.text + ' ';\n        paragraph.speaker = currentSegment.speaker;\n      }\n    }\n  });\n  results.push(paragraph);\n\n  return results;\n}\n\n/**\n* Helper functions\n*/\n\n/**\n* given word start and end time attributes\n* looks for segment range that contains that word\n* if it doesn't find any it returns a segment with `UKN`\n* speaker attributes.\n* @param {object} word - word object\n* @param {array} segments - list of segments objects\n* @return {object} - a single segment whose range contains the word\n*/\nfunction findSegmentForWord(word, segments) {\n\n  const tmpSegment = segments.find((seg) => {\n    if ((word.start >= seg.start) && (word.end <= seg.end)) {\n      return seg;\n    }\n  });\n\n  return tmpSegment;\n}\n\nexport default groupWordsInParagraphsBySpeakers;","/**\n * Convert Digital Paper Edit transcript json format to DraftJS\n * More details see\n * https://github.com/bbc/digital-paper-edit\n */\nimport generateEntitiesRanges from '../generate-entities-ranges';\nimport groupWordsInParagraphsBySpeakers from './group-words-by-speakers';\n/**\n * groups words list from kaldi transcript based on punctuation.\n * @todo To be more accurate, should introduce an honorifics library to do the splitting of the words.\n * @param {array} words - array of words opbjects from kaldi transcript\n */\nconst groupWordsInParagraphs = (words) => {\n  const results = [];\n  let paragraph = { words: [], text: [] };\n\n  words.forEach((word) => {\n    paragraph.words.push(word);\n    paragraph.text.push(word.text);\n\n    // if word contains punctuation\n    if (/[.?!]/.test(word.text)) {\n      paragraph.text = paragraph.text.join(' ');\n      results.push(paragraph);\n      // reset paragraph\n      paragraph = { words: [], text: [] };\n    }\n  });\n\n  return results;\n};\n\nconst generateDraftJsContentBlock = (paragraph) => {\n  const { words, text, speaker } = paragraph;\n  const start = words.length > 0 ? words[0].start : 0;\n\n  return {\n    text: text,\n    type: 'paragraph',\n    data: {\n      speaker: speaker,\n      words: words,\n      start: start,\n    },\n    // the entities as ranges are each word in the space-joined text,\n    // so it needs to be compute for each the offset from the beginning of the paragraph and the length\n    entityRanges: generateEntitiesRanges(words, 'text'), // wordAttributeName\n  };\n};\n\nconst digitalPaperEditToDraft = (digitalPaperEditTranscriptJson) => {\n  let wordsByParagraphs = [];\n\n  const { words, paragraphs } = digitalPaperEditTranscriptJson;\n\n  if (!paragraphs) {\n    wordsByParagraphs = groupWordsInParagraphs(words);\n  } else {\n    wordsByParagraphs = groupWordsInParagraphsBySpeakers(words, paragraphs);\n  }\n\n  const results = wordsByParagraphs.map((paragraph, i) => {\n    if (!paragraph.speaker) {\n      paragraph.speaker = `TBC ${ i }`;\n    }\n\n    return generateDraftJsContentBlock(paragraph);\n  });\n\n  return results;\n};\n\nexport default digitalPaperEditToDraft;\n","/**\n * Helper function to generate draft.js entityMap from draftJS blocks,\n */\n\n/**\n * helper function to flatten a list.\n * converts nested arrays into one dimensional array\n * @param {array} list\n */\nconst flatten = list => list.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n\n/**\n * helper function to create createEntityMap\n * @param {*} blocks - draftJs blocks\n */\nconst createEntityMap = (blocks) => {\n  const entityRanges = blocks.map(block => block.entityRanges);\n  const flatEntityRanges = flatten(entityRanges);\n\n  const entityMap = {};\n\n  flatEntityRanges.forEach((data) => {\n    entityMap[data.key] = {\n      type: 'WORD',\n      mutability: 'MUTABLE',\n      data,\n    };\n  });\n\n  return entityMap;\n};\n\nexport default createEntityMap;","/**\n * Converts GCP Speech to Text Json to DraftJs\n * see `sample` folder for example of input and output as well as `example-usage.js`\n */\n\nimport generateEntitiesRanges from '../generate-entities-ranges/index.js';\n\nconst NANO_SECOND = 1000000000;\n\n/**\n * attribute for the sentences object containing the text. eg sentences ={ punct:'helo', ... }\n *  or eg sentences ={ text:'hello', ... }\n * @param sentences\n */\nexport const getBestAlternativeSentence = sentences => {\n  if (sentences.alternatives.length === 0) {\n    return sentences[0];\n  }\n\n  const sentenceWithHighestConfidence = sentences.alternatives.reduce(function(\n    prev,\n    current\n  ) {\n    return parseFloat(prev.confidence) > parseFloat(current.confidence)\n      ? prev\n      : current;\n  });\n\n  return sentenceWithHighestConfidence;\n};\n\nexport const trimLeadingAndTailingWhiteSpace = text => {\n  return text.trim();\n};\n\n/**\n * GCP does not provide a nanosecond attribute if the word starts at 0 nanosecond\n * @param startSecond\n * @param nanoSecond\n * @returns {number}\n */\nconst computeTimeInSeconds = (startSecond, nanoSecond) => {\n\n  let seconds = parseFloat(startSecond);\n\n  if (nanoSecond !== undefined) {\n    seconds = seconds + parseFloat(nanoSecond / NANO_SECOND);\n  }\n\n  return seconds;\n};\n\n/**\n * Normalizes words so they can be used in\n * the generic generateEntitiesRanges() method\n **/\nconst normalizeWord = (currentWord, confidence) => {\n\n  return {\n    start: computeTimeInSeconds(currentWord.startTime.seconds, currentWord.startTime.nanos),\n    end: computeTimeInSeconds(currentWord.endTime.seconds, currentWord.endTime.nanos),\n    text: currentWord.word,\n    confidence: confidence\n  };\n};\n\n/**\n * groups words list from GCP Speech to Text response.\n * @param {array} sentences - array of sentence objects from GCP STT\n */\nconst groupWordsInParagraphs = sentences => {\n  const results = [];\n  let paragraph = {\n    words: [],\n    text: []\n  };\n\n  sentences.forEach((sentence) => {\n    const bestAlternative = getBestAlternativeSentence(sentence);\n    paragraph.text.push(trimLeadingAndTailingWhiteSpace(bestAlternative.transcript));\n\n    bestAlternative.words.forEach((word) => {\n      paragraph.words.push(normalizeWord(word, bestAlternative.confidence));\n    });\n    results.push(paragraph);\n    paragraph = { words: [], text: [] };\n  });\n\n  return results;\n};\n\nconst gcpSttToDraft = gcpSttJson => {\n  const results = [];\n  // const speakerLabels = gcpSttJson.results[0]['alternatives'][0]['words'][0]['speakerTag']\n  // let speakerSegmentation = typeof(speakerLabels) != 'undefined';\n\n  const wordsByParagraphs = groupWordsInParagraphs(gcpSttJson.results);\n\n  wordsByParagraphs.forEach((paragraph, i) => {\n    const draftJsContentBlockParagraph = {\n      text: paragraph.text.join(' '),\n      type: 'paragraph',\n      data: {\n        speaker: paragraph.speaker ? `Speaker ${ paragraph.speaker }` : `TBC ${ i }`,\n        words: paragraph.words,\n        start: parseFloat(paragraph.words[0].start)\n      },\n      // the entities as ranges are each word in the space-joined text,\n      // so it needs to be compute for each the offset from the beginning of the paragraph and the length\n      entityRanges: generateEntitiesRanges(paragraph.words, 'text') // wordAttributeName\n    };\n    results.push(draftJsContentBlockParagraph);\n  });\n\n  return results;\n};\n\nexport default gcpSttToDraft;\n","import bbcKaldiToDraft from './bbc-kaldi/index';\nimport autoEdit2ToDraft from './autoEdit2/index';\nimport speechmaticsToDraft from './speechmatics/index';\nimport amazonTranscribeToDraft from './amazon-transcribe/index';\nimport ibmToDraft from './ibm/index';\nimport digitalPaperEditToDraft from './digital-paper-edit/index';\nimport createEntityMap from './create-entity-map/index';\nimport gcpSttToDraft from './google-stt/index';\n\n/**\n * Adapters for STT conversion\n * @param {json} transcriptData - A json transcript with some word accurate timecode\n * @param {string} sttJsonType - the type of transcript supported by the available adapters\n */\nconst sttJsonAdapter = (transcriptData, sttJsonType) => {\n  let blocks;\n  switch (sttJsonType) {\n  case 'bbckaldi':\n    blocks = bbcKaldiToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n  case 'autoedit2':\n    blocks = autoEdit2ToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n  case 'speechmatics':\n    blocks = speechmaticsToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n  case 'ibm':\n    blocks = ibmToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n  case 'draftjs':\n    return transcriptData; // (typeof transcriptData === 'string')? JSON.parse(transcriptData): transcriptData;\n\n  case 'amazontranscribe':\n    blocks = amazonTranscribeToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n  case 'digitalpaperedit':\n    blocks = digitalPaperEditToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n\n  case 'google-stt':\n    blocks = gcpSttToDraft(transcriptData);\n\n    return { blocks, entityMap: createEntityMap(blocks) };\n\n  default:\n    // code block\n    console.error('Did not recognize the stt engine.');\n  }\n};\n\nexport default sttJsonAdapter;\nexport { createEntityMap };","/**\n * Convert DraftJS to plain text without timecodes or speaker names\n * Text+speaker+timecode\n * TODO: have a separate one or some logic to get text without timecodes?\n *\n * Export looks like\n ```\n00:00:13\t\tF_S12\nThere is a day. About ten years ago when I asked a friend to hold a baby dinosaur called plea. All\n\n00:00:24\t\tF_S1\nthat\n\n00:00:24\t\tF_S12\nhe'd ordered and I was really excited about it because I've always loved about this one has really caught technical features. It had more orders and touch sensors. It had an infra red camera and one of the things that had was a tilt sensor so it. Knew what direction. It was facing. If and when you held it upside down.\n\n00:00:46\t\tU_UKN\nI thought.\n```\n */\n// import { shortTimecode } from '../../util/timecode-converter/';\n\nexport default (blockData) => {\n  // TODO: to export text without speaker or timecodes use line below\n  // const lines = blockData.blocks.map(paragraph => paragraph.text);\n  const lines = blockData.blocks.map(paragraph => {\n    // return `${ shortTimecode(paragraph.data.words[0].start) }\\t${ paragraph.data.speaker }\\n${ paragraph.text }`;\n    return `${ paragraph.text }`;\n  });\n\n  return lines.join('\\n\\n');\n};\n","import { Document, Paragraph, TextRun, Packer } from 'docx';\nimport { shortTimecode } from '../../util/timecode-converter/';\n\nexport default (blockData, transcriptTitle) => {\n  // const lines = blockData.blocks.map(x => x.text);\n\n  return generateDocxFromDraftJs(blockData, transcriptTitle);\n  // return lines.join('\\n\\n');\n};\n\nfunction generateDocxFromDraftJs(blockData, transcriptTitle) {\n\n  const doc = new Document({\n    creator: 'Test',\n    description: 'Test Description',\n    title: transcriptTitle,\n  });\n\n  // Transcript Title\n  // TODO: get title in programmatically - optional value\n  const textTitle = new TextRun(transcriptTitle);\n  const paragraphTitle = new Paragraph();\n  paragraphTitle.addRun(textTitle);\n  paragraphTitle.heading1().center();\n  doc.addParagraph(paragraphTitle);\n\n  // add spacing\n  var paragraphEmpty = new Paragraph();\n  doc.addParagraph(paragraphEmpty);\n\n  blockData.blocks.forEach((draftJsParagraph) => {\n    // TODO: use timecode converter module to convert from seconds to timecode\n    const paragraphSpeakerTimecodes = new Paragraph(shortTimecode(draftJsParagraph.data.words[0].start));\n    const speaker = new TextRun(draftJsParagraph.data.speaker).bold().tab();\n    const textBreak = new TextRun('').break();\n    paragraphSpeakerTimecodes.addRun(speaker);\n    doc.addParagraph(paragraphSpeakerTimecodes);\n    const paragraphText = new Paragraph(draftJsParagraph.text);\n    paragraphText.addRun(textBreak);\n    doc.addParagraph(paragraphText);\n  });\n\n  const packer = new Packer();\n\n  packer.toBlob(doc).then(blob => {\n    const filename = `${ transcriptTitle }.docx`;\n    // // const type =  'application/octet-stream';\n    const a = document.createElement('a');\n    a.href = window.URL.createObjectURL(blob);\n    a.download = filename;\n    a.click();\n\n    return blob;\n  });\n\n}","/**\n * Convert DraftJS to plain text with timecodes and speaker names\n *\n * Example:\n ```\n F_S12 \t [00:00:13] \t There is a day. About ten years ago when I asked a friend to hold a baby dinosaur robot upside down. It was a toy called plea. All\n ```\n *\n */\nimport { shortTimecode } from '../../util/timecode-converter/index.js';\n\nexport default (blockData) => {\n  const lines = blockData.blocks.map((block) => {\n    return `${ block.data.speaker } \\t [${ shortTimecode(block.data.start) }] \\t ${ block.text }`;\n  });\n\n  return lines.join('\\n\\n');\n};\n","/**\n * Convert DraftJS to Digital Paper Edit format\n * More details see\n * https://github.com/bbc/digital-paper-edit\n */\nexport default (blockData) => {\n  const result = { words: [], paragraphs: [] };\n\n  blockData.blocks.forEach((block, index) => {\n    if (block.data.words !== undefined) {\n      // TODO: make sure that when restoring timecodes text attribute in block word data\n      // should be updated as well\n      const tmpParagraph = {\n        id: index,\n        start: block.data.words[0].start, //block.data.start,\n        end: block.data.words[block.data.words.length - 1].end,\n        speaker: block.data.speaker\n      };\n      result.paragraphs.push(tmpParagraph);\n      // using data within a block to get words info\n      const tmpWords = block.data.words.map((word) => {\n        const tmpWord = {\n          id: word.index,\n          start: word.start,\n          end: word.end,\n          text: null\n        };\n        // TODO: need to normalise various stt adapters\n        // so that when they create draftJs json, word text attribute\n        // has got consistent naming. `text` and not `punct` or `word`.\n        if (word.text) {\n          tmpWord.text = word.text;\n        }\n        else if (word.punct) {\n          tmpWord.text = word.punct;\n        }\n        else if (word.word) {\n          tmpWord.text = word.punct;\n        }\n\n        return tmpWord;\n      });\n      // flattening the list of words\n      result.words = result.words.concat(tmpWords);\n    }\n  });\n\n  return result;\n};\n","'use strict';\nimport tokenizer from 'sbd';\n\nfunction textSegmentation(text, honorifics) {\n  var optionalHonorifics = null;\n\n  if (honorifics !== undefined) {\n    optionalHonorifics = honorifics;\n  }\n\n  var options = {\n\t    'newline_boundaries': true,\n\t    'html_boundaries': false,\n\t    'sanitize': false,\n\t    'allowed_tags': false,\n\t    //TODO: Here could open HONORIFICS file and pass them in here I think\n\t    //abbreviations: list of abbreviations to override the original ones for use with other languages. Don't put dots in abbreviations.\n\t    'abbreviations': optionalHonorifics\n  };\n\n  var sentences = tokenizer.sentences(text, options);\n  var sentencesWithLineSpaces = sentences.join('\\n');\n\n  return sentencesWithLineSpaces;\n}\n\nexport default textSegmentation;\n","'use strict';\n\nfunction addLineBreakBetweenSentences(text) {\n  return text.replace(/\\n/g, '\\n\\n');\n}\n\nexport default addLineBreakBetweenSentences;","/**\n * Helper function to remove space after carriage return \\n in lines\n * @param {string} text\n */\nfunction removeSpaceAfterCarriageReturn(text) {\n  return text.replace(/\\n /g, '\\n');\n}\n\nexport default removeSpaceAfterCarriageReturn;","'use strict';\nimport removeSpaceAfterCarriageReturn from '../util/remove-space-after-carriage-return.js';\n\n/*\n  * Helper function\n  * folds array of words\n  * adds `\\n`\n  * foldNumber = char after which to fold. eg 35 char default\n  * TODO: this could be refactored with smaller helper functions\n  */\nfunction foldWordsReturnArray(textArray, foldNumber = 35) {\n  var counter = 0;\n  var result = textArray.map((word, index, list) => {\n    counter += word.length + 1;\n    //resetting counter when there is a 'paragraph' line break \\n\\n\n    if (counter <= foldNumber) {\n    // if not last word in list\n    // cover edge case last element in array does not have a next element\n      if (list[index + 1] !== undefined) {\n        var nextElementLength = list[index + 1].length;\n        //check if adding next word would make the line go over the char limit foldNumber\n        if ((counter + nextElementLength) < foldNumber) {\n          return word;\n        } else {\n          // if it makes it go over, reset counter, return and add line break\n          counter = 0;\n\n          return `${ word }\\n`;\n        }\n        //last word in the list\n      } else {\n        return word;\n      }\n      // if not greater then char foldNumber\n    } else {\n      counter = 0;\n\n      return `${ word }\\n`;\n    }\n  });\n\n  return result;\n}\n\n/*\n* text string of words\n* foldNumber = char after which to fold. eg 35 char.\n*/\nfunction foldWords(text, foldNumber) {\n  // split on two line break\n  var lineArr = text.split('\\n\\n');\n  // fold each line on non fold number char count\n  var foldedWordsInArray = lineArr.map((line) => {\n  \treturn foldWordsReturnArray(line.split(' '), foldNumber);\n  });\n  // flatten result\n  var foldedWordsFlatten = foldedWordsInArray.map((line) => {\n    return line.join(' ');\n  });\n\n  // remove space after carriage return \\n in lines\n  const result = foldedWordsFlatten.map((r) => { return removeSpaceAfterCarriageReturn(r); });\n  // return text\n\n  return result.join('\\n\\n');\n}\n\nexport default foldWords;","// Remove preceding empty space a beginning of line\n// without removing carriage returns\n// https://stackoverflow.com/questions/24282158/javascript-how-to-remove-the-white-space-at-the-start-of-the-string\n\nfunction removeSpaceAtBeginningOfLine(text) {\n  return text.map((r) => {return r.replace(/^\\s+/g, '');});\n}\n\nexport default removeSpaceAtBeginningOfLine;","'use strict';\nimport removeSpaceAtBeginningOfLine from '../util/remove-space-at-beginning-of-line.js';\n\nfunction divideIntoTwoLines(text) {\n  var lines = text.split('\\n');\n\n  var counter = 0;\n\n  var result = lines.map((l) => {\n    if (l === '') {\n      return l;\n    } else {\n      if (counter === 0) {\n        counter += 1;\n        if (l[l.length - 1][0] === '.') {\n          return l + '\\n\\n';\n        }\n\n        return l + '\\n';\n      } else if (counter === 1) {\n        counter = 0;\n\n        return l + '\\n\\n';\n      }\n    }\n  });\n\n  result = removeSpaceAtBeginningOfLine(result);\n  // remove empty lines from list to avoid unwanted space a beginning of line\n  result = result.filter(line => line.length !== 0);\n\n  result = result.join('').trim();\n\n  return result;\n}\n\nexport default divideIntoTwoLines;","import textSegmentation from './text-segmentation/index.js';\nimport addLineBreakBetweenSentences from './line-break-between-sentences/index.js';\nimport foldWords from './fold/index.js';\nimport divideIntoTwoLines from './divide-into-two-lines/index.js';\n\n/**\n * Takes in array of word object,\n *  and returns string containing all the text\n * @param {array} words - Words\n */\nfunction getTextFromWordsList(words) {\n  return words.map((word) => {return word.text;}).join(' ');\n}\n\n/**\n *\n * @param {*} textInput - can be either plain text string or an array of word objects\n */\nfunction preSegmentText(textInput, tmpNumberOfCharPerLine = 35) {\n  let text = textInput;\n  if (typeof textInput === 'object') {\n    text = getTextFromWordsList(textInput);\n  }\n  const segmentedText = textSegmentation(text);\n  // - 2.Line brek between stentences\n  const textWithLineBreakBetweenSentences = addLineBreakBetweenSentences(segmentedText);\n  // - 3.Fold char limit per line\n  const foldedText = foldWords(textWithLineBreakBetweenSentences, tmpNumberOfCharPerLine);\n  // - 4.Divide into two lines\n  // console.log(foldedText)\n  const textDividedIntoTwoLines = divideIntoTwoLines(foldedText);\n\n  return textDividedIntoTwoLines;\n}\n\nexport {\n  preSegmentText,\n  getTextFromWordsList\n};\n\nexport default preSegmentText;","const AMP_REGEX = /&/g;\nconst LT_REGEX = /</g;\nconst GT_REGEX = />/g;\nconst escapeText = str => str.replace(AMP_REGEX, '&amp;').replace(LT_REGEX, '&lt;').replace(GT_REGEX, '&gt;');\n\nexport default escapeText;","const formatSeconds = seconds => new Date(seconds.toFixed(3) * 1000).toISOString().substr(11, 12);\n\nexport default formatSeconds;","import escapeText from './util/escape-text.js';\nimport formatSeconds from './util/format-seconds.js';\n\nconst ttmlGeneratorPremiere = (vttJSON) => {\n  let ttmlOut = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n    <tt xmlns=\"http://www.w3.org/ns/ttml\"\n    xmlns:ttp=\"http://www.w3.org/ns/ttml#parameter\"\n    ttp:timeBase=\"media\"\n    xmlns:m608=\"http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt#cea608\"\n    xmlns:smpte=\"http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt\"\n    xmlns:ttm=\"http://www.w3.org/ns/ttml#metadata\">\n    <head>\n    <metadata>\n    <smpte:information m608:captionService=\"F1C1CC\" m608:channel=\"cc1\"/>\n    </metadata>\n    <styling></styling>\n    <layout></layout>\n    </head>\n    <body><div>`;\n  vttJSON.forEach((v) => {\n    ttmlOut += `<p begin=\"${ formatSeconds(parseFloat(v.start)) }\" end=\"${ formatSeconds(parseFloat(v.end)) }\">${ escapeText(v.text).replace(/\\n/g, '<br />') }</p>\\n`;\n  });\n  ttmlOut += '</div>\\n</body>\\n</tt>';\n\n  return ttmlOut;\n};\n\nexport default ttmlGeneratorPremiere;","// for itt\nimport TC from 'smpte-timecode';\n\nconst tcFormat = (frames, FPS) => {\n  const tc = TC(Math.round(frames), FPS, false);\n\n  return tc.toString().replace(/^00/, '01'); // FIXME this breaks on videos longer than 1h!\n};\n\nexport default tcFormat;","import tcFormat from './util/tc-format.js';\nimport escapeText from './util/escape-text.js';\n\nconst ittGenerator = (vttJSON, lang = 'en-GB', FPS = 25) => {\n  let ittOut =\n      `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <tt\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xmlns=\"http://www.w3.org/ns/ttml\"\n          xmlns:tt=\"http://www.w3.org/ns/ttml\"\n          xmlns:tts=\"http://www.w3.org/ns/ttml#styling\"\n          xmlns:ttp=\"http://www.w3.org/ns/ttml#parameter\"\n          xml:lang=\"${ lang }\"\n          ttp:timeBase=\"smpte\"\n          ttp:frameRate=\"${ FPS }\"\n          ttp:frameRateMultiplier=\"${ FPS === 25 ? '1 1' : '999 1000' }\"\n          ttp:dropMode=\"nonDrop\"\n        >\n        <head>\n          <styling>\n            <style\n              xml:id=\"normal\"\n              tts:fontFamily=\"sansSerif\"\n              tts:fontWeight=\"normal\"\n              tts:fontStyle=\"normal\"\n              tts:color=\"white\"\n              tts:fontSize=\"100%\"\n            />\n          </styling>\n          <layout>\n            <region\n              xml:id=\"bottom\"\n              tts:origin=\"0% 85%\"\n              tts:extent=\"100% 15%\"\n              tts:textAlign=\"center\"\n              tts:displayAlign=\"after\"\n            />\n          </layout>\n        </head>\n        <body style=\"normal\" region=\"bottom\">\n          <div begin=\"-01:00:00:00\">`;\n  vttJSON.forEach((v) => {\n    ittOut += `<p begin=\"${ tcFormat(parseFloat(v.start) * FPS, FPS) }\" end=\"${ tcFormat(parseFloat(v.end) * FPS, FPS) }\">${ escapeText(v.text).replace(/\\n/g, '<br />') }</p>\\n`;\n  });\n  ittOut += '</div>\\n</body>\\n</tt>';\n\n  return ittOut;\n};\n\nexport default ittGenerator;","import escapeText from './util/escape-text.js';\nimport formatSeconds from './util/format-seconds.js';\n\nconst ttmlGenerator = (vttJSON) => {\n  let ttmlOut = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <tt xmlns=\"http://www.w3.org/ns/ttml\">\n    <head></head>\n    <body>\n    <div>`;\n  vttJSON.forEach((v) => {\n    ttmlOut += `<p begin=\"${ formatSeconds(parseFloat(v.start)) }\" end=\"${ formatSeconds(parseFloat(v.end)) }\">${ escapeText(v.text).replace(/\\n/g, '<br />') }</p>\\n`;\n  });\n  ttmlOut += '</div>\\n</body>\\n</tt>';\n\n  return ttmlOut;\n};\n\nexport default ttmlGenerator;","import formatSeconds from './util/format-seconds.js';\nconst srtGenerator = (vttJSON) => {\n  let srtOut = '';\n  vttJSON.forEach((v, i) => {\n    srtOut += `${ i + 1 }\\n${ formatSeconds(parseFloat(v.start)).replace('.', ',') } --> ${ formatSeconds(parseFloat(v.end)).replace('.', ',') }\\n${ v.text.trim() }\\n\\n`;\n  });\n\n  return srtOut;\n};\n\nexport default srtGenerator;","import formatSeconds from './util/format-seconds.js';\n\nconst vttGenerator = (vttJSON) => {\n  let vttOut = 'WEBVTT\\n\\n';\n  vttJSON.forEach((v, i) => {\n    vttOut += `${ i + 1 }\\n${ formatSeconds(parseFloat(v.start)) } --> ${ formatSeconds(parseFloat(v.end)) }\\n${ v.text }\\n\\n`;\n  });\n\n  return vttOut;\n};\n\nexport default vttGenerator;","function csvGenerator(srtJsonContent) {\n  let lines = 'N, In, Out, Text\\n';\n  srtJsonContent.forEach((srtLineO, index) => {\n    lines += `${ index + 1 },`;\n    //need to surround timecodes with \"\\\"\" escaped \" to escape the , for the milliseconds\n    lines += `\\\"${ srtLineO.start }\\\",\\\"${ srtLineO.end }\\\",`;\n    // removing line breaks and and removing \" as they break the csv.\n    // wrapping text in escaped \" to  escape any , for the csv.\n    // adding carriage return \\n to signal end of line in csv\n    // Preserving line break within srt lines to allow round trip from csv back to srt file in same format.\n    // by replacing \\n with \\r\\n.\n    lines += `\\\"${ srtLineO.text.replace(/\\n/g, '\\r\\n') }\\\"\\n`;\n  });\n\n  return lines;\n}\n\nexport default csvGenerator;","import textSegmentation from './presegment-text/text-segmentation/index.js';\nimport addLineBreakBetweenSentences from './presegment-text/line-break-between-sentences/index.js';\nimport foldWords from './presegment-text/fold/index.js';\nimport divideIntoTwoLines from './presegment-text/divide-into-two-lines/index.js';\nimport preSegmentText from './presegment-text/index.js';\nimport { getTextFromWordsList } from './presegment-text/index.js';\n\nimport ttmlGeneratorPremiere from './compose-subtitles/premiere.js';\nimport ittGenerator from './compose-subtitles/itt.js';\nimport ttmlGenerator from './compose-subtitles/ttml.js';\nimport srtGenerator from './compose-subtitles/srt.js';\nimport vttGenerator from './compose-subtitles/vtt.js';\nimport csvGenerator from './compose-subtitles/csv.js';\n\nfunction segmentedTextToList(text) {\n  let result = text.split('\\n\\n');\n  result = result.map(line => {\n    return line.trim();\n  });\n\n  return result;\n}\n\nfunction countWords(text) {\n  return text\n    .trim()\n    .replace(/\\n /g, '')\n    .replace(/\\n/g, ' ')\n    .split(' ').length;\n}\n\nfunction addTimecodesToLines(wordsList, lines) {\n  let startWordCounter = 0;\n  let endWordCounter = 0;\n  const results = lines.map((line) => {\n    endWordCounter += countWords(line);\n\n    const jsonLine = { text: line.trim() };\n    jsonLine.start = wordsList[startWordCounter].start;\n    jsonLine.end = wordsList[endWordCounter - 1].end;\n    startWordCounter = endWordCounter;\n\n    return jsonLine;\n  });\n\n  return results;\n}\n\nfunction preSegmentTextJson(wordsList, numberOfCharPerLine) {\n  const result = preSegmentText(wordsList, numberOfCharPerLine);\n  const segmentedTextArray = segmentedTextToList(result);\n\n  return addTimecodesToLines(wordsList, segmentedTextArray);\n}\n\nfunction subtitlesComposer({ words, type, numberOfCharPerLine }) {\n  const subtitlesJson = preSegmentTextJson(words, numberOfCharPerLine);\n  if (typeof words === 'string') {\n    return preSegmentText(words, numberOfCharPerLine);\n  }\n  switch (type) {\n  case 'premiere':\n    return ttmlGeneratorPremiere(subtitlesJson);\n  case 'ttml':\n    return ttmlGenerator(subtitlesJson);\n  case 'itt':\n    return ittGenerator(subtitlesJson);\n  case 'srt':\n    return srtGenerator(subtitlesJson);\n  case 'vtt':\n    return vttGenerator(subtitlesJson);\n  case 'json':\n    return subtitlesJson;\n  case 'csv':\n    return csvGenerator(subtitlesJson);\n  case 'pre-segment-txt':\n    return preSegmentText(words, numberOfCharPerLine);\n  case 'txt':\n    return preSegmentText(words, numberOfCharPerLine);\n  default:\n    return {\n      ttml: ttmlGenerator(subtitlesJson),\n      premiere: ttmlGeneratorPremiere(subtitlesJson),\n      itt: ittGenerator(subtitlesJson),\n      srt: srtGenerator(subtitlesJson),\n      vtt: vttGenerator(subtitlesJson),\n      json: subtitlesJson\n    };\n  }\n}\n\nexport {\n  textSegmentation,\n  addLineBreakBetweenSentences,\n  foldWords,\n  divideIntoTwoLines,\n  getTextFromWordsList,\n  preSegmentText,\n  ttmlGeneratorPremiere,\n  ttmlGenerator,\n  ittGenerator,\n  srtGenerator,\n  vttGenerator\n};\n\nexport default subtitlesComposer;\n","import draftToTxt from './txt/index';\nimport draftToDocx from './docx/index';\nimport draftToTxtSpeakersTimecodes from './txt-speakers-timecodes/index';\nimport draftToDigitalPaperEdit from './draftjs-to-digital-paper-edit/index.js';\nimport subtitlesGenerator from './subtitles-generator/index.js';\n/**\n * Adapters for Draft.js conversion\n * @param {json} blockData - Draft.js blocks\n * @param {string} exportFormat - the type of file supported by the available adapters\n */\n\nconst exportAdapter = (blockData, exportFormat, transcriptTitle) => {\n  switch (exportFormat) {\n  case 'draftjs':\n    return { data: blockData, ext: 'json' };\n  case 'txt':\n    return { data: draftToTxt(blockData), ext: 'txt' };\n  case 'docx':\n    return { data: draftToDocx(blockData, transcriptTitle), ext: 'docx' };\n  case 'txtspeakertimecodes':\n    return { data: draftToTxtSpeakersTimecodes(blockData), ext: 'txt' };\n  case 'digitalpaperedit':\n    return { data: draftToDigitalPaperEdit(blockData), ext: 'json' };\n  case 'srt':\n    var { words } = draftToDigitalPaperEdit(blockData);\n    const srtContent = subtitlesGenerator({ words, type: 'srt', numberOfCharPerLine: 35 });\n\n    return { data: srtContent, ext: 'srt' };\n\n  case 'premiereTTML':\n    var { words } = draftToDigitalPaperEdit(blockData);\n    var content = subtitlesGenerator({ words, type: 'premiere' });\n\n    return { data: content, ext: 'ttml' };\n  case 'ttml':\n    var { words } = draftToDigitalPaperEdit(blockData);\n    var content = subtitlesGenerator({ words, type: 'ttml' });\n\n    return { data: content, ext: 'ttml' };\n  case 'itt':\n    var { words } = draftToDigitalPaperEdit(blockData);\n    var content = subtitlesGenerator({ words, type: 'itt' });\n\n    return { data: content, ext: 'itt' };\n\n  case 'csv':\n    var { words } = draftToDigitalPaperEdit(blockData);\n    var content = subtitlesGenerator({ words, type: 'csv' });\n\n    return { data: content, ext: 'csv' };\n  case 'vtt':\n    var { words } = draftToDigitalPaperEdit(blockData);\n    var content = subtitlesGenerator({ words, type: 'vtt' });\n\n    return { data: content, ext: 'vtt' };\n  case 'json-captions':\n    var { words } = draftToDigitalPaperEdit(blockData);\n    var content = subtitlesGenerator({ words, type: 'json' });\n\n    return { data: content, ext: 'json' };\n  case 'pre-segment-txt':\n    var { words } = draftToDigitalPaperEdit(blockData);\n    var content = subtitlesGenerator({ words, type: 'pre-segment-txt' });\n\n    return { data: content, ext: 'txt' };\n  default:\n    // code block\n    console.error('Did not recognise the export format');\n  }\n};\n\nexport default exportAdapter;\n","// code obtained from https://github.com/bbc/stt-align-node\n\nimport { toWords } from 'number-to-words';\nimport difflib from 'difflib';\nimport everpolate from 'everpolate';\n\n/**\n * https://stackoverflow.com/questions/175739/built-in-way-in-javascript-to-check-if-a-string-is-a-valid-number\n * @param {*}  num\n * @return {boolean} - if it's a number true, if it's not false.\n */\nfunction isANumber(num) {\n  return !isNaN(num);\n}\n\nfunction removeTrailingPunctuation(str) {\n  return str.replace(/\\.$/, '');\n}\n\n/**\n * removes capitalization, punctuation and converts numbers to letters\n * @param {string} wordText - word text\n * @return {string}\n * handles edge case if word is undefined, and returns undefined in that instance\n */\nfunction normaliseWord(wordText) {\n  if (wordText) {\n    const wordTextResult = wordText.toLowerCase().trim().replace(/[^a-z|0-9|.]+/g, '');\n    if (isANumber(wordTextResult)) {\n      const sanitizedWord = removeTrailingPunctuation(wordTextResult);\n      if (sanitizedWord !== '') {\n        return toWords(sanitizedWord);\n      }\n    }\n\n    return wordTextResult;\n  } else {\n    return wordText;\n  }\n}\n\n// using neighboring words to set missing start and end time when present\nfunction interpolationOptimization(wordsList) {\n  return wordsList.map((word, index) => {\n    let wordTmp = word;\n    // setting the start time of each unmatched word to the previous word’s end time - when present\n    // does not first element in list edge case\n\n    if (('start' in word) && (index !== 0)) {\n      const previousWord = wordsList[index - 1];\n      if ('end' in previousWord) {\n        wordTmp = {\n          start: previousWord.end,\n          end: word.end,\n          word: word.word\n        };\n      }\n    }\n    // TODO: handle first item ?\n    // setting the end time of each unmatched word to the next word’s start time - when present\n    // does handle last element in list edge case\n    if (('end' in word) && (index !== (wordsList.length - 1))) {\n      const nextWord = wordsList[index + 1];\n      if ('start' in nextWord) {\n        wordTmp = {\n          end: nextWord.start,\n          start: word.start,\n          word: word.word\n        };\n      }\n    }\n\n    // TODO: handle last item ?\n    return wordTmp;\n  });\n}\n\n// after the interpolation, some words have overlapping timecodes.\n// the end time of the previous word is greater then the start of the current word\n// altho negligible when using in a transcript editor context\n// we want to avoid this, coz it causes issues when using the time of the words to generate\n// auto segmented captions. As it results in sentence\n// boundaries overlapping on screen during playback\nfunction adjustTimecodesBoundaries(words) {\n\n  return words.map((word, index, arr) => {\n    // excluding first element\n    if (index != 0 ) {\n      const previousWord = arr[index - 1];\n      const currentWord = word;\n      if (previousWord.end > currentWord.start) {\n        word.start = previousWord.end;\n      }\n\n      return word;\n    }\n\n    return word;\n  });\n}\n\nfunction interpolate(wordsList) {\n  const words = interpolationOptimization(wordsList);\n  const indicies = [ ...Array(words.length).keys() ];\n  const indiciesWithStart = [];\n  const indiciesWithEnd = [];\n  const startTimes = [];\n  const endTimes = [];\n\n  words.forEach((word, index) => {\n    if ('start' in word) {\n      indiciesWithStart.push(index);\n      startTimes.push(word.start);\n    }\n\n    if ('end' in word) {\n      indiciesWithEnd.push(index);\n      endTimes.push(word.end);\n    }\n  });\n  // http://borischumichev.github.io/everpolate/#linear\n  const outStartTimes = everpolate.linear(indicies, indiciesWithStart, startTimes);\n  const outEndTimes = everpolate.linear(indicies, indiciesWithEnd, endTimes);\n  const wordsResults = words.map((word, index) => {\n    if (!('start' in word)) {\n      word.start = outStartTimes[index];\n    }\n    if (!('end' in word)) {\n      word.end = outEndTimes[index];\n    }\n\n    return word;\n  });\n\n  return adjustTimecodesBoundaries(wordsResults);\n}\n\n/**\n *\n * @param {array} sttWords - array of STT words\n * @param {array} transcriptWords - array of base text accurate words\n */\nfunction alignWords(sttWords, transcriptWords) {\n  // # convert words to lowercase and remove numbers and special characters\n  const sttWordsStripped = sttWords.map((word) => {\n    return normaliseWord(word.word);\n  });\n\n  const transcriptWordsStripped = transcriptWords.map((word) => {\n    return normaliseWord(word);\n  });\n  // # create empty list to receive data\n  const transcriptData = [];\n  // empty objects as place holder\n  transcriptWords.forEach(() => {\n    transcriptData.push({});\n  });\n  // # populate transcriptData with matching words\n  // // if they are same length, just interpolate words ?\n  // http://qiao.github.io/difflib.js/\n  const matcher = new difflib.SequenceMatcher(null, sttWordsStripped, transcriptWordsStripped);\n  const opCodes = matcher.getOpcodes();\n\n  opCodes.forEach((opCode) => {\n    const matchType = opCode[0];\n    const sttStartIndex = opCode[1];\n    const sttEndIndex = opCode[2];\n    const baseTextStartIndex = opCode[3];\n\n    if (matchType === 'equal' ) {\n      // slice does not not include the end - hence +1\n      const sttDataSegment = sttWords.slice(sttStartIndex, sttEndIndex);\n      transcriptData.splice(baseTextStartIndex, sttDataSegment.length, ...sttDataSegment);\n    }\n\n    transcriptData.forEach((wordObject, index) => {\n      wordObject.word = transcriptWords[index];\n    });\n    // # replace words with originals\n  });\n\n  // # fill in missing timestamps\n  return interpolate(transcriptData);\n}\n\nexport default alignWords;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  EditorState,\n  CompositeDecorator,\n  convertFromRaw,\n  convertToRaw,\n  getDefaultKeyBinding,\n  Modifier\n} from \"draft-js\";\n\n\nimport CustomEditor from './CustomEditor.js';\nimport Word from './Word';\n\nimport sttJsonAdapter from '../../stt-adapters';\nimport exportAdapter from '../../export-adapters';\nimport updateTimestamps from './UpdateTimestamps/index.js';\nimport style from './index.module.css';\n\nclass TimedTextEditor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      editorState: EditorState.createEmpty()\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  shouldComponentUpdate = (nextProps, nextState) => {\n    if (nextProps !== this.props) return true;\n    if (nextState !== this.state) return true;\n    return false;\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      prevProps.timecodeOffset !== this.props.timecodeOffset ||\n      prevProps.showSpeakers !== this.props.showSpeakers ||\n      prevProps.showTimecodes !== this.props.showTimecodes ||\n      prevProps.isEditable !== this.props.isEditable\n    ) {\n      // forcing a re-render is an expensive operation and\n      // there might be a way of optimising this at a later refactor (?)\n      // the issue is that WrapperBlock is not update on TimedTextEditor\n      // state change otherwise.\n      // for now compromising on this, as setting timecode offset, and\n      // display preferences for speakers and timecodes are not expected to\n      // be very frequent operations but rather one time setup in most cases.\n      this.forceRenderDecorator();\n    }\n  }\n\n  onChange = editorState => {\n    // https://draftjs.org/docs/api-reference-editor-state#lastchangetype\n    // https://draftjs.org/docs/api-reference-editor-change-type\n    // doing editorStateChangeType === 'insert-characters'  is triggered even\n    // outside of draftJS eg when clicking play button so using this instead\n    // see issue https://github.com/facebook/draft-js/issues/1060\n    // also \"insert-characters\" does not get triggered if you delete text\n    // if (this.state.editorState.getCurrentContent() !== editorState.getCurrentContent()) {\n    //   if (this.props.isPauseWhileTypingOn) {\n    //     if (this.props.isPlaying()) {\n    //       this.props.playMedia(false);\n    //       // Pause video for X seconds\n    //       const pauseWhileTypingIntervalInMilliseconds = 3000;\n    //       // resets timeout\n    //       clearTimeout(this.plauseWhileTypingTimeOut);\n    //       this.plauseWhileTypingTimeOut = setTimeout(\n    //         function() {\n    //           // after timeout starts playing again\n    //           this.props.playMedia(true);\n    //         }.bind(this),\n    //         pauseWhileTypingIntervalInMilliseconds\n    //       );\n    //     }\n    //   }\n\n    //   if (this.saveTimer !== undefined) {\n    //     clearTimeout(this.saveTimer);\n    //   }\n    //   this.saveTimer = setTimeout(() => {\n    //     this.setState(\n    //       () => ({\n    //         editorState\n    //       }),\n    //       () => {\n    //         // const data = this.updateTimestampsForEditorState();\n    //         const data = this.getEditorContent( this.props.autoSaveContentType, this.props.title);\n    //         this.props.handleAutoSaveChanges(data);\n    //       }\n    //     );\n    //   }, 1000);\n    // }\n\n    // if (this.props.isEditable) {\n    //   this.setState({ editorState });\n    // }\n  };\n\n  updateTimestampsForEditorState() {\n    // Update timestamps according to the original state.\n    // const currentContent = convertToRaw(\n    //   this.state.editorState.getCurrentContent()\n    // );\n    // const updatedContentRaw = updateTimestamps(\n    //   currentContent,\n    //   this.state.originalState\n    // );\n    // const updatedContent = convertFromRaw(updatedContentRaw);\n\n    // // Update editor state\n    // const newEditorState = EditorState.push(\n    //   this.state.editorState,\n    //   updatedContent\n    // );\n\n    // // Re-convert updated content to raw to gain access to block keys\n    // const updatedContentBlocks = convertToRaw(updatedContent);\n\n    // // Get current selection state and update block keys\n    // const selectionState = this.state.editorState.getSelection();\n\n    // // Check if editor has currently the focus. If yes, keep current selection.\n    // if (selectionState.getHasFocus()) {\n    //   // Build block map, which maps the block keys of the previous content to the block keys of the\n    //   // updated content.\n    //   var blockMap = {};\n    //   for (\n    //     var blockIdx = 0;\n    //     blockIdx < currentContent.blocks.length;\n    //     blockIdx++\n    //   ) {\n    //     blockMap[currentContent.blocks[blockIdx].key] =\n    //       updatedContentBlocks.blocks[blockIdx].key;\n    //   }\n\n    //   const selection = selectionState.merge({\n    //     anchorOffset: selectionState.getAnchorOffset(),\n    //     anchorKey: blockMap[selectionState.getAnchorKey()],\n    //     focusOffset: selectionState.getFocusOffset(),\n    //     focusKey: blockMap[selectionState.getFocusKey()]\n    //   });\n\n    //   // Set the updated selection state on the new editor state\n    //   const newEditorStateSelected = EditorState.forceSelection(\n    //     newEditorState,\n    //     selection\n    //   );\n    //   this.setState({ editorState: newEditorStateSelected });\n    //   return newEditorStateSelected;\n    // } else {\n    //   this.setState({ editorState: newEditorState });\n    //   return newEditorState;\n    // }\n  }\n\n  loadData() {\n    if (this.props.transcriptData !== null) {\n      const blocks = sttJsonAdapter(\n        this.props.transcriptData,\n        this.props.sttJsonType\n      );\n      this.setState({ originalState: convertToRaw(convertFromRaw(blocks)) });\n      this.setEditorContentState(blocks);\n    }\n  }\n\n  // getEditorContent(exportFormat, title) {\n  //   const format = exportFormat || 'draftjs';\n  //   const tmpEditorState = this.updateTimestampsForEditorState();\n\n  //   return exportAdapter(\n  //     convertToRaw(tmpEditorState.getCurrentContent()),\n  //     format,\n  //     title\n  //   );\n  // }\n\n  // click on words - for navigation\n  // eslint-disable-next-line class-methods-use-this\n  handleDoubleClick = event => {\n    // nativeEvent --> React giving you the DOM event\n    let element = event.nativeEvent.target;\n    // find the parent in Word that contains span with time-code start attribute\n    while (!element.hasAttribute(\"data-start\") && element.parentElement) {\n      element = element.parentElement;\n    }\n\n    if (element.hasAttribute(\"data-start\")) {\n      const t = parseFloat(element.getAttribute(\"data-start\"));\n      this.props.onWordClick(t);\n    }\n  };\n\n  // originally from\n  // https://github.com/draft-js-plugins/draft-js-plugins/blob/master/draft-js-counter-plugin/src/WordCounter/index.js#L12\n  getWordCount = editorState => {\n    const plainText = editorState.getCurrentContent().getPlainText('');\n    const regex = /(?:\\r\\n|\\r|\\n)/g; // new line, carriage return, line feed\n    const cleanString = plainText.replace(regex, \" \").trim(); // replace above characters w/ space\n    const wordArray = cleanString.match(/\\S+/g); // matches words according to whitespace\n\n    return wordArray ? wordArray.length : 0;\n  };\n\n  /**\n   * @param {object} data.entityMap - draftJs entity maps - used by convertFromRaw\n   * @param {object} data.blocks - draftJs blocks - used by convertFromRaw\n   * set DraftJS Editor content state from blocks\n   * contains blocks and entityMap\n   */\n  setEditorContentState = data => {\n    const contentState = convertFromRaw(data);\n    // eslint-disable-next-line no-use-before-define\n    const editorState = EditorState.createWithContent(contentState, decorator);\n\n    // if (this.props.handleAnalyticsEvents !== undefined) {\n    //   this.props.handleAnalyticsEvents({\n    //     category: \"TimedTextEditor\",\n    //     action: \"setEditorContentState\",\n    //     name: \"getWordCount\",\n    //     value: this.getWordCount(editorState)\n    //   });\n    // }\n\n    this.setState({ editorState }, ()=>{\n      this.forceRenderDecorator();\n    });\n  };\n\n  // Helper function to re-render this component\n  // used to re-render WrapperBlock on timecode offset change\n  // or when show / hide preferences for speaker labels and timecodes change\n  forceRenderDecorator = () => {\n    console.log('>>>>force rerender')\n    const contentState = this.state.editorState.getCurrentContent();\n    const decorator = this.state.editorState.getDecorator();\n    const newState = EditorState.createWithContent(contentState, decorator);\n    const newEditorState = EditorState.push(newState, contentState);\n    this.setState({ editorState: newEditorState });\n  };\n\n  /**\n   * Update Editor content state\n   */\n  setEditorNewContentState = newContentState => {\n    const decorator = this.state.editorState.getDecorator();\n    const newState = EditorState.createWithContent(newContentState, decorator);\n    const newEditorState = EditorState.push(\n      newState,\n      newContentState\n    );\n    this.setState({ editorState: newEditorState });\n  };\n\n  setEditorNewContentStateSpeakersUpdate = newContentState => {\n    const decorator = this.state.editorState.getDecorator();\n    const newState = EditorState.createWithContent(newContentState, decorator);\n    const editorState = EditorState.push(\n      newState,\n      newContentState\n    );\n\n    this.setState(\n      () => ({\n        editorState\n      }),\n      () => {\n        const format =  this.props.autoSaveContentType;\n        const title = this.props.title;\n\n        const data = exportAdapter(\n          convertToRaw(editorState.getCurrentContent()),\n          format,\n          title\n        );\n\n        this.props.handleAutoSaveChanges(data);\n      }\n    );\n  };\n\n  /**\n   * Listen for draftJs custom key bindings\n   */\n  customKeyBindingFn = e => {\n    const enterKey = 13;\n    const spaceKey = 32;\n    const kKey = 75;\n    const lKey = 76;\n    const jKey = 74;\n    const equalKey = 187; //used for +\n    const minusKey = 189; // -\n    const rKey = 82;\n    const tKey = 84;\n\n    if (e.keyCode === enterKey) {\n      console.log('customKeyBindingFn');\n\n      return \"split-paragraph\";\n    }\n    // if alt key is pressed in combination with these other keys\n    if (\n      e.altKey &&\n      (e.keyCode === spaceKey ||\n        e.keyCode === spaceKey ||\n        e.keyCode === kKey ||\n        e.keyCode === lKey ||\n        e.keyCode === jKey ||\n        e.keyCode === equalKey ||\n        e.keyCode === minusKey ||\n        e.keyCode === rKey ||\n        e.keyCode === tKey)\n    ) {\n      e.preventDefault();\n\n      return \"keyboard-shortcuts\";\n    }\n\n    return getDefaultKeyBinding(e);\n  };\n\n  /**\n   * Handle draftJs custom key commands\n   */\n  handleKeyCommand = command => {\n    if (command === 'split-paragraph') {\n      this.splitParagraph();\n    }\n\n    if (command === \"keyboard-shortcuts\") {\n      return \"handled\";\n    }\n    return 'not-handled';\n  };\n\n  /**\n   * Helper function to handle splitting paragraphs with return key\n   * on enter key, perform split paragraph at selection point.\n   * Add timecode of next word after split to paragraph\n   * as well as speaker name to new paragraph\n   * TODO: move into its own file as helper function\n   */\n  splitParagraph = () => {\n    // https://github.com/facebook/draft-js/issues/723#issuecomment-367918580\n    // https://draftjs.org/docs/api-reference-selection-state#start-end-vs-anchor-focus\n    const currentSelection = this.state.editorState.getSelection();\n    // only perform if selection is not selecting a range of words\n    // in that case, we'd expect delete + enter to achieve same result.\n    if (currentSelection.isCollapsed()) {\n      const currentContent = this.state.editorState.getCurrentContent();\n      // https://draftjs.org/docs/api-reference-modifier#splitblock\n      const newContentState = Modifier.splitBlock(\n        currentContent,\n        currentSelection\n      );\n      // https://draftjs.org/docs/api-reference-editor-state#push\n      const splitState = EditorState.push(\n        this.state.editorState,\n        newContentState,\n        'split-block'\n      );\n      const targetSelection = splitState.getSelection();\n\n      const originalBlock = currentContent.blockMap.get(\n        newContentState.selectionBefore.getStartKey()\n      );\n      const originalBlockData = originalBlock.getData();\n      const blockSpeaker = originalBlockData.get(\"speaker\");\n\n      let wordStartTime = \"NA\";\n      // eslint-disable-next-line prefer-const\n      let isEndOfParagraph = false;\n      // identify the entity (word) at the selection/cursor point on split.\n      // eslint-disable-next-line prefer-const\n      let entityKey = originalBlock.getEntityAt(\n        currentSelection.getStartOffset()\n      );\n      // if there is no word entity associated with a char then there is no entity key\n      // at that selection point\n      if (entityKey === null) {\n        const closestEntityToSelection = this.findClosestEntityKeyToSelectionPoint(\n          currentSelection,\n          originalBlock\n        );\n        entityKey = closestEntityToSelection.entityKey;\n        isEndOfParagraph = closestEntityToSelection.isEndOfParagraph;\n        // handle edge case when it doesn't find a closest entity (word)\n        // eg pres enter on an empty line\n        if (entityKey === null) {\n          return \"not-handled\";\n        }\n      }\n      // if there is an entityKey at or close to the selection point\n      // can get the word startTime. for the new paragraph.\n      const entityInstance = currentContent.getEntity(entityKey);\n      const entityData = entityInstance.getData();\n      if (isEndOfParagraph) {\n        // if it's end of paragraph use end time of word for new paragraph\n        wordStartTime = entityData.end;\n      } else {\n        wordStartTime = entityData.start;\n      }\n      // split paragraph\n      // https://draftjs.org/docs/api-reference-modifier#mergeblockdata\n      const afterMergeContentState = Modifier.mergeBlockData(\n        splitState.getCurrentContent(),\n        targetSelection,\n        {\n          start: wordStartTime,\n          speaker: blockSpeaker\n        }\n      );\n      this.setEditorNewContentState(afterMergeContentState);\n\n      return \"handled\";\n    }\n\n    return 'not-handled';\n  };\n\n  /**\n   * Helper function for splitParagraph\n   * to find the closest entity (word) to a selection point\n   * that does not fall on an entity to begin with\n   * Looks before if it's last char in a paragraph block.\n   * After for everything else.\n   */\n  findClosestEntityKeyToSelectionPoint = (currentSelection, originalBlock) => {\n    // set defaults\n    let entityKey = null;\n    let isEndOfParagraph = false;\n\n    // selection offset from beginning of the paragraph block\n    const startSelectionOffsetKey = currentSelection.getStartOffset();\n    // length of the plain text for the ContentBlock\n    const lengthPlainTextForTheBlock = originalBlock.getLength();\n    // number of char from selection point to end of paragraph\n    const remainingCharNumber =\n      lengthPlainTextForTheBlock - startSelectionOffsetKey;\n    // if it's the last char in the paragraph - get previous entity\n    if (remainingCharNumber === 0) {\n      isEndOfParagraph = true;\n      for (let j = lengthPlainTextForTheBlock; j > 0; j--) {\n        entityKey = originalBlock.getEntityAt(j);\n        if (entityKey !== null) {\n          // if it finds it then return\n          return { entityKey, isEndOfParagraph };\n        }\n      }\n    }\n    // if it's first char or another within the block - get next entity\n    else {\n      let initialSelectionOffset = currentSelection.getStartOffset();\n      for (let i = 0; i < remainingCharNumber; i++) {\n        initialSelectionOffset += i;\n        entityKey = originalBlock.getEntityAt(initialSelectionOffset);\n        // if it finds it then return\n        if (entityKey !== null) {\n          return { entityKey, isEndOfParagraph };\n        }\n      }\n    }\n\n    // cover edge cases where it doesn't find it\n    return { entityKey, isEndOfParagraph };\n  };\n\n  getCurrentWord = () => {\n    const currentWord = {\n      start: \"NA\",\n      end: \"NA\"\n    };\n\n    if (this.props.transcriptData) {\n      const contentState = this.state.editorState.getCurrentContent();\n      // TODO: using convertToRaw here might be slowing down performance(?)\n      const contentStateConvertEdToRaw = convertToRaw(contentState);\n      const entityMap = contentStateConvertEdToRaw.entityMap;\n\n      for (var entityKey in entityMap) {\n        const entity = entityMap[entityKey];\n        const word = entity.data;\n\n        if (\n          word.start <= this.props.currentTime &&\n          word.end >= this.props.currentTime\n        ) {\n          currentWord.start = word.start;\n          currentWord.end = word.end;\n        }\n      }\n    }\n\n    if (currentWord.start !== \"NA\") {\n      if (this.props.isScrollIntoViewOn) {\n        const currentWordElement = document.querySelector(\n          `span.Word[data-start=\"${ currentWord.start }\"]`\n        );\n        currentWordElement.scrollIntoView({\n          block: 'nearest',\n          inline: 'center'\n        });\n      }\n    }\n\n    return currentWord;\n  };\n\n  onWordClick = e => {\n    this.props.onWordClick(e);\n  };\n\n  render() {\n    // console.log('render TimedTextEditor');\n    const currentWord = this.getCurrentWord();\n    const highlightColour = \"#69e3c2\";\n    const unplayedColor = \"#767676\";\n    const correctionBorder = \"1px dotted blue\";\n\n    // Time to the nearest half second\n    const time = Math.round(this.props.currentTime * 4.0) / 4.0;\n\n    const editor = (\n      <section\n        className={style.editor}\n        onDoubleClick={this.handleDoubleClick}\n        // TODO: decide if on mobile want to have a way to \"click\" on words\n        // to play corresponding media\n        // a double tap would be the ideal solution\n        // onTouchStart={ event => this.handleDoubleClick(event) }\n      >\n        <style scoped>\n          {`span.Word[data-start=\"${ currentWord.start }\"] { background-color: ${ highlightColour }; text-shadow: 0 0 0.01px black }`}\n          {`span.Word[data-start=\"${ currentWord.start }\"]+span { background-color: ${ highlightColour } }`}\n          {`span.Word[data-prev-times~=\"${ Math.floor(\n            time\n          ) }\"] { color: ${ unplayedColor } }`}\n          {`span.Word[data-prev-times~=\"${ time }\"] { color: ${ unplayedColor } }`}\n          {`span.Word[data-confidence=\"low\"] { border-bottom: ${ correctionBorder } }`}\n        </style>\n        <CustomEditor\n          editorState={this.state.editorState}\n          onChange={this.onChange}\n          stripPastedStyles\n          handleKeyCommand={this.handleKeyCommand}\n          customKeyBindingFn={this.customKeyBindingFn}\n          spellCheck={this.props.spellCheck}\n          showSpeakers={this.props.showSpeakers}\n          showTimecodes={this.props.showTimecodes}\n          timecodeOffset={this.props.timecodeOffset}\n          setEditorNewContentState={this.setEditorNewContentState}\n          setEditorNewContentStateSpeakersUpdate={this.setEditorNewContentStateSpeakersUpdate}\n          onWordClick={this.onWordClick}\n          handleAnalyticsEvents={this.props.handleAnalyticsEvents}\n          isEditable={this.props.isEditable}\n          handleNumWord={this.props.handleNumWord}\n        />\n      </section>\n    );\n\n    return (\n      <section>{this.props.transcriptData !== null ? editor : null}</section>\n    );\n  }\n}\n\n// DraftJs decorator to recognize which entity is which\n// and know what to apply to what component\nconst getEntityStrategy = mutability => (\n  contentBlock,\n  callback,\n  contentState\n) => {\n  contentBlock.findEntityRanges(character => {\n    const entityKey = character.getEntity();\n    if (entityKey === null) {\n      return false;\n    }\n\n    return contentState.getEntity(entityKey).getMutability() === mutability;\n  }, callback);\n};\n\n// decorator definition - Draftjs\n// defines what to use to render the entity\nconst decorator = new CompositeDecorator([\n  {\n    strategy: getEntityStrategy('MUTABLE'),\n    component: Word\n  }\n]);\n\nTimedTextEditor.propTypes = {\n  transcriptData: PropTypes.object,\n  mediaUrl: PropTypes.string,\n  isEditable: PropTypes.bool,\n  spellCheck: PropTypes.bool,\n  onWordClick: PropTypes.func,\n  sttJsonType: PropTypes.string,\n  isPlaying: PropTypes.func,\n  playMedia: PropTypes.func,\n  currentTime: PropTypes.number,\n  isScrollIntoViewOn: PropTypes.bool,\n  isPauseWhileTypingOn: PropTypes.bool,\n  timecodeOffset: PropTypes.number,\n  handleAnalyticsEvents: PropTypes.func,\n  showSpeakers: PropTypes.bool,\n  showTimecodes: PropTypes.bool,\n  fileName: PropTypes.string,\n  handleNumWord: PropTypes.func,\n};\n\nexport default TimedTextEditor;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport style from './Select.module.scss';\n\nclass Select extends React.Component {\n\n  render() {\n    const options = this.props.options.map((option, index) => {\n      // eslint-disable-next-line react/no-array-index-key\n      return <option key={ index } value={ option.value }>{option.label}</option>;\n    });\n\n    return (\n      <select\n        className={ style.selectPlayerControl }\n        name={ this.props.name }\n        value={ this.props.currentValue }\n        onChange={ this.props.handleChange }\n      >\n        {options}\n      </select>\n    );\n  }\n}\n\nSelect.propTypes = {\n  options: PropTypes.array,\n  name: PropTypes.string,\n  currentValue: PropTypes.string,\n  handleChange: PropTypes.func\n};\n\nexport default Select;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport isEqual from 'react-fast-compare';\n\nimport Select from './Select';\n\nimport style from './PlayerControls/index.module.scss';\n\nclass PlaybackRate extends React.Component {\n\n  shouldComponentUpdate = (nextProps) => {\n    return !isEqual(this.props, nextProps);\n  }\n\n  render() {\n    return (\n      <span className={ style.playBackRate }\n        title=\"Playback rate: alt - & alt + \">\n        <Select\n          options={ this.props.playbackRateOptions }\n          currentValue={ this.props.playbackRate.toString() }\n          name={ 'playbackRate' }\n          handleChange={ this.props.handlePlayBackRateChange }\n        />\n      </span>\n    );\n  }\n}\n\nPlaybackRate.propTypes = {\n  playbackRateOptions: PropTypes.array,\n  playbackRate: PropTypes.number,\n  handlePlayBackRateChange: PropTypes.func\n};\n\nexport default PlaybackRate;\n","import React from 'react';\nimport isEqual from 'react-fast-compare';\n\nimport style from './index.module.scss';\n\nclass TimeBox extends React.Component {\n  shouldComponentUpdate = (nextProps) => {\n    return !isEqual(this.props, nextProps);\n  }\n\n  handleClick = (e) => {\n    this.props.promptSetCurrentTime(e);\n  }\n\n  render() {\n    return (\n      <div className={ style.timeBox }>\n        <span\n          title=\"Current time: alt t\"\n          className={ style.currentTime }\n          onClick={ this.handleClick }>\n          { this.props.currentTime }</span>\n        <span className={ style.separator }>|</span>\n        <span\n          title=\"Clip duration\"\n          className={ style.duration }>\n          {this.props.duration}</span>\n      </div>\n    );\n  }\n}\n\nexport default TimeBox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport isEqual from 'react-fast-compare';\n\nimport {\n  faSave,\n  faTv,\n  faPlay,\n  faPause,\n  faBackward,\n  faForward,\n  faUndo,\n  faVolumeUp,\n  faVolumeMute\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport PlaybackRate from '../PlaybackRate';\nimport TimeBox from './TimeBox.js';\n\nimport style from './index.module.scss';\n\nclass PlayerControls extends React.Component {\n\n  shouldComponentUpdate = (nextProps) => {\n    return !isEqual(this.props, nextProps);\n  }\n\n  setIntervalHelperBackward = () => {\n    // this.props.skipBackward();\n    this.interval = setInterval(() => {\n      this.props.skipBackward();\n    }, 300);\n  }\n\n  setIntervalHelperForward = () => {\n    // this.props.skipForward();\n    this.interval = setInterval(() => {\n      this.props.skipForward();\n    }, 300);\n  }\n\n  clearIntervalHelper = () => {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    \n    const pictureInPicture = ('pictureInPictureEnabled' in document) ? ( <button\n      value=\"Picture-in-picture\"\n      title=\"Picture-in-picture\"\n      className={ `${ style.playerButton } ${ style.pip }` }\n      onClick={ this.props.pictureInPicture }>\n      <FontAwesomeIcon icon={ faTv } />\n    </button> ) : null;\n\n    return (\n      <div className={ style.playerControls }>\n        <TimeBox\n          promptSetCurrentTime={ this.props.promptSetCurrentTime }\n          currentTime={ this.props.currentTime }\n          duration={ this.props.duration }\n        />\n\n        <div className={ style.btnsGroup }>\n          <button\n            value=\"seek backward by a set interval: alt r\"\n            title=\"seek backward by a set interval: alt r\"\n            className={ style.playerButton }\n            onClick={ this.props.rollback }>\n            <FontAwesomeIcon icon={ faUndo } />\n          </button>\n\n          <button\n            value=\"seek backward: alt j\"\n            title=\"seek backward: alt j\"\n            className={ style.playerButton }\n            onMouseDown={ this.setIntervalHelperBackward }\n            onMouseUp={ this.clearIntervalHelper }\n            onClick={ () => {this.props.skipBackward(); } }>\n            <FontAwesomeIcon icon={ faBackward } />\n          </button>\n\n          <button\n            value=\"Play/Pause: alt k\"\n            title=\"Play/Pause: alt k\"\n            className={ style.playerButton }\n            onClick={ this.props.playMedia }>\n            {this.props.isPlaying ? <FontAwesomeIcon icon={ faPause } /> : <FontAwesomeIcon icon={ faPlay } />}\n          </button>\n\n          <button\n            value=\"seek forward: alt l\"\n            title=\"seek forward: alt l\"\n            className={ style.playerButton }\n            onMouseDown={ this.setIntervalHelperForward }\n            onMouseUp={ this.clearIntervalHelper }\n            onClick={ () => {this.props.skipForward(); } }>\n            <FontAwesomeIcon icon={ faForward } />\n          </button>\n        </div>\n\n        <div className={ style.btnsGroup }>\n          <PlaybackRate\n            playbackRateOptions={ this.props.playbackRateOptions }\n            playbackRate={ this.props.playbackRate }\n            name={ 'playbackRate' }\n            handlePlayBackRateChange={ this.props.setPlayBackRate }\n          />\n\n          {pictureInPicture}\n\n          <button\n            value=\"Toggle Sound\"\n            title=\"Toggle Sound\"\n            className={ style.playerButton }\n            onClick={ this.props.handleMuteVolume }>\n            { this.props.isMute ? <FontAwesomeIcon icon={ faVolumeMute } /> : <FontAwesomeIcon icon={ faVolumeUp } /> }\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nPlayerControls.propTypes = {\n  playMedia: PropTypes.func,\n  currentTime: PropTypes.string,\n  timecodeOffset: PropTypes.string,\n  promptSetCurrentTime: PropTypes.func,\n  rollback: PropTypes.func,\n  handleMuteVolume: PropTypes.func,\n  duration: PropTypes.string,\n  isPlaying: PropTypes.bool,\n  isMute: PropTypes.bool,\n  skipBackward: PropTypes.func,\n  skipForward: PropTypes.func,\n  playbackRate: PropTypes.number,\n  playbackRateOptions: PropTypes.array,\n  setPlayBackRate: PropTypes.func,\n  pictureInPicture: PropTypes.func\n};\n\nexport default PlayerControls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport isEqual from 'react-fast-compare';\n\nimport style from './ProgressBar.module.scss';\n\nclass ProgressBar extends React.Component {\n  shouldComponentUpdate = (nextProps) => {\n    return !isEqual(this.props, nextProps);\n  }\n\n  handleOnChange = (e) => {\n    this.props.buttonClick(e);\n  }\n\n  render() {\n    return (\n      <div className={ style.wrapper }>\n        <input\n          type='range'\n          className={ style.bar }\n          onChange={ this.handleOnChange }\n          value={ this.props.value }\n          min='0'\n          max={ this.props.max.toString() }\n        />\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  value: PropTypes.string,\n  max: PropTypes.string,\n  buttonClick: PropTypes.func\n};\n\nProgressBar.defaultProps = {\n  value: '0',\n  max: '0',\n};\n\nexport default ProgressBar;\n","function returnHotKeys(self) {\n  return {\n    'alt+k': {\n      priority: 1,\n      handler: () => {\n        self.togglePlayMedia();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+k',\n          name: 'togglePlayMedia',\n          value: 'na'\n        });\n\n      },\n      displayKeyCombination: 'alt + k',\n      label: 'Play Media',\n    },\n    'alt+l': {\n      priority: 1,\n      handler: () => {\n        self.skipForward();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+l',\n          name: 'skipForward',\n          value: 'na'\n        });\n\n      },\n      displayKeyCombination: 'alt + l',\n      label: 'Fast Forward',\n    },\n    'alt+j': {\n      priority: 1,\n      handler: () => {\n        self.skipBackward();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+j',\n          name: 'skipBackward',\n          value: 'na'\n        });\n\n      },\n      displayKeyCombination: 'alt + j',\n      label: 'Rewind',\n    },\n    'alt+-': {\n      priority: 1,\n      handler: () => {\n        self.decreasePlaybackRate();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+-',\n          name: 'decreasePlaybackRate',\n          value: 'na'\n        });\n\n      },\n      displayKeyCombination: 'alt + -',\n      label: 'Decrease Playback Speed',\n    },\n    // https://github.com/ccampbell/mousetrap/issues/266\n    'alt+=': {\n      priority: 1,\n      handler: () => {\n        self.increasePlaybackRate();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+plus',\n          name: 'increasePlaybackRate',\n          value: 'na'\n        });\n\n      },\n      displayKeyCombination: 'alt + +',\n      label: 'Increase Playback Speed',\n    },\n    'alt+r': {\n      priority: 1,\n      handler: () => {\n        self.rollBack();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+r',\n          name: 'rollBack',\n          value: 'na'\n        });\n\n      },\n      displayKeyCombination: 'alt + r',\n      label: 'Roll Back',\n    },\n    'alt+t': {\n      priority: 1,\n      handler: () => {\n        self.promptSetCurrentTime();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+t',\n          name: 'promptSetCurrentTime',\n          value: 'na'\n        });\n\n      },\n      displayKeyCombination: 'alt + t',\n      label: 'set current time',\n    }\n  };\n}\n\nexport default returnHotKeys;\n","const PLAYBACK_RATES = [\n  { value: 0.2, label: '0.2' },\n  { value: 0.25, label: '0.25' },\n  { value: 0.5, label: '0.5' },\n  { value: 0.75, label: '0.75' },\n  { value: 1, label: '1' },\n  { value: 1.25, label: '1.25' },\n  { value: 1.5, label: '1.5' },\n  { value: 1.75, label: '1.75' },\n  { value: 2, label: '2' },\n  { value: 2.5, label: '2.5' },\n  { value: 3, label: '3' },\n  { value: 3.5, label: '3.5' }\n];\n\nexport default PLAYBACK_RATES;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { hotkeys } from 'react-keyboard-shortcuts';\n\nimport PlayerControls from './src/PlayerControls';\nimport ProgressBar from './src/ProgressBar';\n\nimport returnHotKeys from './src/config/defaultHotKeys';\n\nimport styles from './index.module.scss';\n\nimport {\n  secondsToTimecode,\n  timecodeToSeconds\n} from '../../util/timecode-converter';\n\nimport PLAYBACK_RATES from './src/config/playbackRates.js';\n\nclass MediaPlayer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playbackRate: 1,\n      rollBackValueInSeconds: this.props.rollBackValueInSeconds,\n      timecodeOffset: this.props.timecodeOffset,\n      hotKeys: returnHotKeys(this),\n      isPlaying: false,\n      playbackRateOptions: PLAYBACK_RATES,\n      previewIsDisplayed: true,\n      isMute: false\n    };\n  }\n  /*eslint-disable camelcase */\n  hot_keys = returnHotKeys(this);\n\n  static getDerivedStateFromProps(nextProps) {\n    if (nextProps.timecodeOffset !== null) {\n      let newCurrentTimeInSeconds = nextProps.timecodeOffset;\n\n      if (\n        typeof newCurrentTimeInSeconds === 'string' &&\n        newCurrentTimeInSeconds.includes(':') &&\n        !newCurrentTimeInSeconds.includes('NaN')\n      ) {\n        newCurrentTimeInSeconds = timecodeToSeconds(nextProps.timecodeOffset);\n      }\n\n      return {\n        timecodeOffset: newCurrentTimeInSeconds,\n        rollBackValueInSeconds: nextProps.rollBackValueInSeconds\n      };\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    // TODO: Should these hook functions be optional? are they needed? what do they actually do?\n    // TODO: these hook functions need refactoring, they are causing performance problems\n    this.props.hookSeek(this.setCurrentTime);\n    this.props.hookPlayMedia(this.togglePlayMedia);\n    this.props.hookIsPlaying(this.isPlaying);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.rollBackValueInSeconds !== this.state.rollBackValueInSeconds) {\n      return true;\n    }\n    if (nextProps.timecodeOffset !== this.state.timecodeOffset) {\n      return true;\n    }\n    // TODO: workaround to keep the hook functions, only call re-renders\n    // if current time has changed. And it seems eliminate component's unecessary re-renders.\n    if (nextProps.currentTime !== this.props.currentTime) {\n      return true;\n    }\n\n    if (nextState.playbackRate !== this.state.playbackRate) {\n      return true;\n    }\n\n    if (nextProps.mediaDuration !== this.props.mediaDuration ) {\n      return true;\n    }\n\n    if (nextState.isMute !== this.state.isMute) {\n      return true;\n    }\n\n    return false;\n  }\n\n  setCurrentTime = newCurrentTime => {\n    if (newCurrentTime !== '' && newCurrentTime !== null) {\n      // hh:mm:ss:ff - mm:ss - m:ss - ss - seconds number or string and hh:mm:ss\n      const newCurrentTimeInSeconds = timecodeToSeconds(newCurrentTime);\n      const videoRef = this.props.videoRef.current;\n\n      if (videoRef.readyState === 4) {\n        videoRef.currentTime = newCurrentTimeInSeconds;\n        this.playMedia();\n      }\n    }\n  };\n\n  /**\n   * Prompts for a time stamp or time code to set media current time\n   * Also handles use can when the user has set a timecode offset via settings\n   * and the prompt is expected to be relative to that offset\n   */\n  promptSetCurrentTime = () => {\n    let userTimecodeValue = prompt(\n      'Jump to time - hh:mm:ss:ff hh:mm:ss mm:ss m:ss m.ss seconds'\n    );\n    // TODO: add some validation, eg if user types just a string it won't crash.\n    // needs function to check it's either timecode on the formats specified above or a number\n    // this could be part of the timecode module(?)\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: 'MediaPlayer',\n        action: 'promptSetCurrentTime',\n        name: 'userTimecodeValue',\n        value: userTimecodeValue\n      });\n    }\n    // user clicks cancel to prompt, prompt returns null\n    if (userTimecodeValue !== null) {\n      if (userTimecodeValue.includes(':')) {\n        userTimecodeValue = timecodeToSeconds(userTimecodeValue);\n      }\n      // remove timecode offset if preset\n      if (this.state.timecodeOffset !== 0) {\n        userTimecodeValue -= this.state.timecodeOffset;\n      }\n\n      this.setCurrentTime(userTimecodeValue);\n    }\n  };\n\n  setTimeCodeOffset = newTimeCodeOffSet => {\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: 'MediaPlayer',\n        action: 'setTimeCodeOffset',\n        name: 'timecodeOffsetValue',\n        value: newTimeCodeOffSet\n      });\n    }\n\n    if (newTimeCodeOffSet !== '' && newTimeCodeOffSet !== null) {\n      // use similar helper function from above to convert\n      let newCurrentTimeInSeconds = newTimeCodeOffSet;\n      if (newTimeCodeOffSet.includes(':')) {\n        newCurrentTimeInSeconds = timecodeToSeconds(newTimeCodeOffSet);\n        this.setState({ timecodeOffset: newCurrentTimeInSeconds });\n      }\n    }\n  };\n\n  rollBack = () => {\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: 'MediaPlayer',\n        action: 'rollBack',\n        name: 'rollBackValue',\n        value: this.state.rollBackValueInSeconds\n      });\n    }\n    // get video duration\n    const videoElem = this.props.videoRef.current;\n    const tmpDesiredCurrentTime =\n        videoElem.currentTime - this.state.rollBackValueInSeconds;\n      // > 0 < duration of video\n    this.setCurrentTime(tmpDesiredCurrentTime);\n  };\n\n  handlePlayBackRateChange = e => {\n    this.setPlayBackRate(parseFloat(e.target.value));\n  };\n\n  /**\n   * @param {float} input - playback rate value as a float\n   */\n  setPlayBackRate = input => {\n    if (input >= 0.2 && input <= 3.5) {\n      this.setState(\n        {\n          playbackRate: input\n        },\n        () => {\n          this.props.videoRef.current.playbackRate = input;\n\n          if (this.props.handleAnalyticsEvents) {\n            this.props.handleAnalyticsEvents({\n              category: 'MediaPlayer',\n              action: 'setPlayBackRate',\n              name: 'playbackRateNewValue',\n              value: input\n            });\n          }\n        }\n      );\n    }\n  };\n\n  decreasePlaybackRate = () => {\n    const speeds = [ ...PLAYBACK_RATES ].reverse();\n    const slower = speeds.find(option => option.value < this.state.playbackRate);\n    const newSpeed = slower ? slower.value : 0.2;\n\n    this.setPlayBackRate(newSpeed);\n  };\n\n  increasePlaybackRate = () => {\n    const speeds = [ ...PLAYBACK_RATES ];\n    const faster = speeds.find(option => option.value > this.state.playbackRate);\n    const newSpeed = faster ? faster.value : 3.5;\n\n    this.setPlayBackRate(newSpeed);\n  };\n\n  handleChangeReplayRollbackValue = e => {\n    this.setState({\n      rollBackValueInSeconds: e.target.value\n    });\n  };\n\n  handleMuteVolume = () => {\n    if (this.props.videoRef.current.volume > 0) {\n      this.props.videoRef.current.volume = 0;\n      this.setState({ isMute: true });\n    } else {\n      this.props.videoRef.current.volume = 1;\n      this.setState({ isMute: false });\n    }\n  };\n\n  // TEMP: keeping this in for now. Might be replaced by state\n  // The pauseWhileTyping logic (in TimedTextEditor) currently uses this\n  isPlaying = () => {\n    return !this.props.videoRef.current.paused;\n  };\n\n  pauseMedia = () => {\n    this.setState({ isPlaying: false }, () => this.props.videoRef.current.pause());\n\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: 'MediaPlayer',\n        action: 'pauseMedia',\n        name: 'pauseMedia',\n        value: secondsToTimecode(this.props.videoRef.current.currentTime)\n      });\n    }\n  };\n\n  playMedia = () => {\n    this.setState({ isPlaying: true }, () => this.props.videoRef.current.play());\n\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: 'MediaPlayer',\n        action: 'playMedia',\n        name: 'playMedia',\n        value: secondsToTimecode(this.props.videoRef.current.currentTime)\n      });\n    }\n  };\n\n  // Sets isPlaying state and toggles modes on the video player\n  // TODO: modularise these / enable specific play / pause action\n  togglePlayMedia = () => {\n    if (this.state.isPlaying) {\n      this.pauseMedia();\n    } else {\n      this.playMedia();\n    }\n  };\n\n  skipForward = () => {\n    const currentTime = this.props.videoRef.current.currentTime;\n    const newCurrentTimeIncreased = currentTime + 10;\n    const newCurrentTime = Number(newCurrentTimeIncreased.toFixed(1));\n\n    this.setCurrentTime(newCurrentTime);\n  };\n\n  skipBackward = () => {\n    const currentTime = this.props.videoRef.current.currentTime;\n    const newCurrentTimeIncreased = currentTime - 10;\n    const newCurrentTime = Number(newCurrentTimeIncreased.toFixed(1));\n\n    this.setCurrentTime(newCurrentTime);\n  };\n\n  handleProgressBarClick = e => {\n    const time = e.target.value;\n    this.setCurrentTime(time);\n\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: 'MediaPlayer',\n        action: 'handleProgressBarClick',\n        name: 'roundNewCurrentTime',\n        value: time\n      });\n    }\n  };\n\n  getMediaCurrentTime = () => secondsToTimecode(this.props.videoRef.current.currentTime + this.state.timecodeOffset);\n\n  handlePictureInPicture = () => {\n    if (document.pictureInPictureElement !== undefined) {\n      // from https://developers.google.com/web/updates/2017/09/picture-in-picture\n      if (!document.pictureInPictureElement) {\n        if (this.props.handleAnalyticsEvents) {\n          this.props.handleAnalyticsEvents({\n            category: 'MediaPlayer',\n            action: 'handlePictureInPicture',\n            name: 'turning-picture-in-picture-on'\n          });\n        }\n\n        this.props.videoRef.current.requestPictureInPicture().catch(error => {\n          console.error('Video failed to enter Picture-in-Picture mode', error);\n\n          if (this.props.handleAnalyticsEvents) {\n            this.props.handleAnalyticsEvents({\n              category: 'MediaPlayer',\n              action: 'handlePictureInPicture',\n              name: 'turning-picture-in-picture-on-error'\n            });\n          }\n        });\n      } else {\n        if (this.props.handleAnalyticsEvents) {\n          this.props.handleAnalyticsEvents({\n            category: 'MediaPlayer',\n            action: 'handlePictureInPicture',\n            name: 'turning-picture-in-picture-off'\n          });\n        }\n\n        document.exitPictureInPicture().catch(error => {\n          console.error('Video failed to leave Picture-in-Picture mode', error);\n\n          if (this.props.handleAnalyticsEvents) {\n            this.props.handleAnalyticsEvents({\n              category: 'MediaPlayer',\n              action: 'handlePictureInPicture',\n              name: 'turning-picture-in-picture-off-error'\n            });\n          }\n        });\n      }\n    } else {\n      alert('Picture in Picture not supported in this browser, try chrome.');\n      if (this.props.handleAnalyticsEvents) {\n        this.props.handleAnalyticsEvents({\n          category: 'MediaPlayer',\n          action: 'handlePictureInPicture',\n          name: 'picture-in-picture-not-supported'\n        });\n      }\n    }\n  };\n\n  getProgressBarMax = () => parseInt(this.props.videoRef.current.duration).toString();\n  getProgressBarValue = () => parseInt(this.props.videoRef.current.currentTime).toString();\n\n  render() {\n    const progressBar = (\n      <ProgressBar\n        max={ this.getProgressBarMax() }\n        value={ this.getProgressBarValue() }\n        buttonClick={ this.handleProgressBarClick }\n      />\n    );\n\n    const playerControlsSection = (\n      <div className={ styles.controlsSection }>\n        {this.props.title ? <h2 className={ styles.title } title={ this.props.title }>{this.props.title}</h2> : null}\n        <PlayerControls\n          playMedia={ this.togglePlayMedia.bind(this) }\n          isPlaying={ this.state.isPlaying }\n          isMute={ this.state.isMute }\n          playbackRate={ this.state.playbackRate }\n          skipBackward={ this.skipBackward.bind(this) }\n          skipForward={ this.skipForward.bind(this) }\n          rollback={ this.rollBack }\n          currentTime={ this.getMediaCurrentTime() }\n          duration={ this.props.mediaDuration }\n          onSetCurrentTime={ '' }\n          onSetTimecodeOffset={ '' }\n          promptSetCurrentTime={ this.promptSetCurrentTime.bind(this) }\n          setTimeCodeOffset={ this.setTimeCodeOffset.bind(this) }\n          timecodeOffset={ secondsToTimecode(this.state.timecodeOffset) }\n          handleMuteVolume={ this.handleMuteVolume.bind(this) }\n          setPlayBackRate={ this.handlePlayBackRateChange.bind(this) }\n          playbackRateOptions={ this.state.playbackRateOptions }\n          pictureInPicture={ this.handlePictureInPicture }\n        />\n        {this.props.mediaUrl ? progressBar : null}\n      </div>\n    );\n\n    // original\n    // <div className={ styles.playerSection }>\n    //     {this.props.mediaUrl ? playerControlsSection : null}\n    // </div>\n\n    return (\n      <section className={ styles.topSection }>\n        <div className={ styles.controlsSection }>\n          {this.props.title ? <h2 className={ styles.title } title={ this.props.title }>{this.props.title}</h2> : null}\n        </div>\n      </section>\n    );\n  }\n}\n\nMediaPlayer.propTypes = {\n  videoRef: PropTypes.object.isRequired,\n  title: PropTypes.string,\n  hookSeek: PropTypes.func,\n  hookPlayMedia: PropTypes.func,\n  hookIsPlaying: PropTypes.func,\n  mediaUrl: PropTypes.string,\n  hookOnTimeUpdate: PropTypes.func,\n  rollBackValueInSeconds: PropTypes.number,\n  timecodeOffset: PropTypes.number,\n  handleAnalyticsEvents: PropTypes.func,\n  mediaDuration: PropTypes.string\n};\n\nexport default hotkeys(MediaPlayer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './index.module.css';\n\nclass VideoPlayer extends React.Component {\n\n  // to avoid unnecessary re-renders\n  shouldComponentUpdate(nextProps) {\n    if (nextProps.previewIsDisplayed !== this.props.previewIsDisplayed) {\n      return true;\n    }\n\n    if (nextProps.mediaUrl !== this.props.mediaUrl) {\n      return true;\n    }\n\n    return false;\n  }\n\n  handlePlayMedia = () => {\n    if (this.props.videoRef.current !== null) {\n      return this.props.videoRef.current.paused\n        ? this.props.videoRef.current.play()\n        : this.props.videoRef.current.pause();\n    }\n  };\n  render() {\n    const isDisplayed = this.props.previewIsDisplayed ? 'inline' : 'none';\n\n    return (\n      <video\n        id=\"video\"\n        playsInline\n        src={ this.props.mediaUrl }\n        onTimeUpdate={ this.props.onTimeUpdate }\n        data-testid=\"media-player-id\"\n        onClick={ this.handlePlayMedia }\n        onLoadedData={ this.props.onLoadedDataGetDuration }\n        ref={ this.props.videoRef }\n        className={ styles.videoEl }\n        preload=\"auto\"\n        style={ {\n          display: isDisplayed\n        } }\n      />\n    );\n  }\n}\n\nVideoPlayer.propTypes = {\n  mediaUrl: PropTypes.string,\n  onTimeUpdate: PropTypes.func,\n  onClick: PropTypes.func,\n  videoRef: PropTypes.object.isRequired,\n  onLoadedDataGetDuration: PropTypes.func,\n  previewIsDisplayed: PropTypes.bool,\n  previewViewWidth: PropTypes.string\n};\n\nexport default VideoPlayer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport style from './index.module.css';\n\nclass Toggle extends React.Component {\n  render() {\n    return (\n      <div className={ style.switchContainer }>\n        <label className={ style.switch }>\n          <input type='checkbox'\n            defaultChecked={ this.props.defaultValue }\n            onChange={ this.props.handleToggle }\n          />\n          <span className={ style.slider }></span>\n        </label>\n      </div>\n    );\n  }\n}\n\nToggle.propTypes = {\n  handleToggle: PropTypes.func,\n  label: PropTypes.string,\n  defaultValue: PropTypes.bool\n};\n\nexport default Toggle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport style from './index.module.css';\n\nimport {\n  timecodeToSeconds,\n  secondsToTimecode\n} from '../../../util/timecode-converter';\n\nclass TimecodeOffset extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      timecodeOffset: secondsToTimecode(this.props.timecodeOffset)\n    };\n  }\n\n  handleChange = e => {\n    this.setState({\n      timecodeOffset: e.target.value\n    });\n  };\n\n  resetTimecodeOffset = () => {\n    const resetTimecodeOffsetValue = 0;\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: 'TimecodeOffset',\n        action: 'resetTimecodeOffset',\n        name: 'resetTimecodeOffset',\n        value: 0\n      });\n    }\n\n    this.setState({\n      timecodeOffset: secondsToTimecode(resetTimecodeOffsetValue)\n    }, () => {\n      this.props.handleSetTimecodeOffset(resetTimecodeOffsetValue);\n    }\n    );\n  };\n\n  setTimecodeOffset = () => {\n    if (this.props.handleAnalyticsEvents !== undefined) {\n      this.props.handleAnalyticsEvents({\n        category: 'TimecodeOffset',\n        action: 'setTimecodeOffset',\n        name: 'setTimecodeOffset',\n        value: this.state.timecodeOffset\n      });\n    }\n\n    let newCurrentTimeInSeconds = this.state.timecodeOffset;\n\n    if (\n      typeof newCurrentTimeInSeconds === 'string' &&\n      newCurrentTimeInSeconds.includes(':') &&\n      !newCurrentTimeInSeconds.includes('NaN')\n    ) {\n      newCurrentTimeInSeconds = timecodeToSeconds(newCurrentTimeInSeconds);\n    }\n    this.props.handleSetTimecodeOffset(newCurrentTimeInSeconds);\n  };\n\n  render() {\n    return (\n      <div className={ style.offsetContainer }>\n        <input\n          className={ style.inputBox }\n          type=\"text\"\n          value={ this.state.timecodeOffset }\n          onChange={ this.handleChange }\n          name=\"lname\"\n        />\n        <span className={ style.button } onClick={ this.resetTimecodeOffset }>\n          <u>Reset</u>\n        </span>\n        <span> | </span>\n        <span className={ style.button } onClick={ this.setTimecodeOffset }>\n          <u>Save</u>\n        </span>\n      </div>\n    );\n  }\n}\n\nTimecodeOffset.propTypes = {\n  handleSetTimecodeOffset: PropTypes.func,\n  onChange: PropTypes.func,\n  timecodeOffset: PropTypes.number,\n  handleAnalyticsEvents: PropTypes.func\n};\n\nexport default TimecodeOffset;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons';\n\nimport Toggle from './Toggle/';\nimport TimecodeOffset from './TimecodeOffset';\n\nimport style from './index.module.css';\n\nclass Settings extends React.Component {\n\n  render() {\n    return (\n      <div className={ style.settings }>\n        <h2 className={ style.header }>Settings Panel</h2>\n        <div className={ style.closeButton } onClick={ this.props.handleSettingsToggle }>\n          <FontAwesomeIcon icon={ faWindowClose } />\n        </div>\n\n        <div className={ style.controlsContainer }>\n          <section className={ style.settingElement }>\n            <div className={ style.label }>Pause While Typing</div>\n            <Toggle\n              defaultValue={ this.props.defaultValuePauseWhileTyping }\n              label={ 'Pause while typing' }\n              handleToggle={ this.props.handlePauseWhileTyping }\n            />\n          </section>\n\n          <section className={ style.settingElement }>\n            <div className={ style.label }>Scroll Sync</div>\n            <Toggle\n              defaultValue={ this.props.defaultValueScrollSync }\n              label={ 'ScrollSync' }\n              handleToggle={ this.props.handleIsScrollIntoViewChange }\n            />\n          </section>\n\n          <section className={ style.settingElement }>\n            <div className={ style.label }>Rollback Interval (sec)</div>\n            <input\n              className={ style.rollbackValue }\n              type=\"number\"\n              step=\"1\"\n              max=\"60\"\n              min=\"1\"\n              value={ this.props.defaultRollBackValueInSeconds }\n              onChange={ this.props.handleRollBackValueInSeconds }\n              name=\"lname\"/>\n          </section>\n\n          <section className={ style.settingElement }>\n            <div className={ style.label }>Show Timecodes</div>\n            <Toggle\n              defaultValue={ this.props.showTimecodes }\n              label={ 'Hide Timecodes' }\n              handleToggle={ this.props.handleShowTimecodes }\n            />\n          </section>\n\n          <section className={ style.settingElement }>\n            <div className={ style.label }>Show Speaker Labels</div>\n            <Toggle\n              defaultValue={ this.props.showSpeakers }\n              label={ 'Hide Speaker Labels' }\n              handleToggle={ this.props.handleShowSpeakers }\n            />\n          </section>\n\n          <section className={ style.settingElement }>\n            <div className={ style.label }>Display Preview</div>\n            <Toggle\n              defaultValue={ this.props.previewIsDisplayed }\n              label={ 'Display Preview' }\n              handleToggle={ this.props.handlePreviewIsDisplayed }\n            />\n          </section>\n\n          <section className={ style.settingElement }>\n            <div className={ style.timecodeLabel }>Timecode Offset ℹ</div>\n            <TimecodeOffset\n              timecodeOffset={ this.props.timecodeOffset }\n              handleSetTimecodeOffset={ this.props.handleSetTimecodeOffset }\n              handleAnalyticsEvents={ this.props.handleAnalyticsEvents }\n            />\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nSettings.propTypes = {\n  showTimecodes: PropTypes.bool,\n  showSpeakers: PropTypes.bool,\n  timecodeOffset: PropTypes.number,\n  handleShowTimecodes: PropTypes.func,\n  handleShowSpeakers: PropTypes.func,\n  handleSetTimecodeOffset: PropTypes.func,\n  handleSettingsToggle: PropTypes.func,\n  handlePauseWhileTyping: PropTypes.func,\n  handleIsScrollIntoViewChange: PropTypes.func,\n  handleRollBackValueInSeconds: PropTypes.func,\n  defaultValueScrollSync: PropTypes.bool,\n  defaultValuePauseWhileTyping: PropTypes.bool,\n  defaultRollBackValueInSeconds: PropTypes.number,\n  previewIsDisplayed: PropTypes.bool,\n  handlePreviewIsDisplayed: PropTypes.func,\n  // previewViewWidth: PropTypes.string,\n  handleChangePreviewViewWidth: PropTypes.func,\n  handleAnalyticsEvents: PropTypes.func\n};\n\nexport default Settings;\n","function returnHotKeys(self) {\n  return {\n    'alt+k': {\n      priority: 1,\n      handler: () => {\n        self.togglePlayMedia();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+k',\n          name: 'togglePlayMedia',\n          value: 'na'\n        });\n      },\n      displayKeyCombination: 'alt + k',\n      label: 'Play Media'\n    },\n    'alt+l': {\n      priority: 1,\n      handler: () => {\n        self.skipForward();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+l',\n          name: 'skipForward',\n          value: 'na'\n        });\n      },\n      displayKeyCombination: 'alt + l',\n      label: 'Fast Forward'\n    },\n    'alt+j': {\n      priority: 1,\n      handler: () => {\n        self.skipBackward();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+j',\n          name: 'skipBackward',\n          value: 'na'\n        });\n      },\n      displayKeyCombination: 'alt + j',\n      label: 'Rewind'\n    },\n    'alt+-': {\n      priority: 1,\n      handler: () => {\n        self.decreasePlaybackRate();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+-',\n          name: 'decreasePlaybackRate',\n          value: 'na'\n        });\n      },\n      displayKeyCombination: 'alt + -',\n      label: 'Decrease Playback Speed'\n    },\n    // https://github.com/ccampbell/mousetrap/issues/266\n    'alt+=': {\n      priority: 1,\n      handler: () => {\n        self.increasePlaybackRate();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+plus',\n          name: 'increasePlaybackRate',\n          value: 'na'\n        });\n      },\n      displayKeyCombination: 'alt + +',\n      label: 'Increase Playback Speed'\n    },\n    'alt+r': {\n      priority: 1,\n      handler: () => {\n        self.rollBack();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+r',\n          name: 'rollBack',\n          value: 'na'\n        });\n      },\n      displayKeyCombination: 'alt + r',\n      label: 'Roll Back'\n    },\n    'alt+t': {\n      priority: 1,\n      handler: () => {\n        self.promptSetCurrentTime();\n\n        self.props.handleAnalyticsEvents({\n          category: 'defaultHotKeys',\n          action: 'alt+t',\n          name: 'promptSetCurrentTime',\n          value: 'na'\n        });\n      },\n      displayKeyCombination: 'alt + t',\n      label: 'set current time'\n    }\n  };\n}\nexport default returnHotKeys;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport returnHotKeys from './hot-keys';\n\nimport style from './index.module.css';\n\nexport const getHotKeys = returnHotKeys;\n\nclass KeyboardShortcuts extends React.Component {\n  render() {\n    const hotKeys = returnHotKeys(this);\n\n    const hotKeysCheatsheet = Object.keys(hotKeys).map(key => {\n      const shortcut = hotKeys[key];\n\n      return (\n        <li key={ key } className={ style.listItem }>\n          <div className={ style.shortcut }>{shortcut.displayKeyCombination}</div>\n          <div className={ style.shortcutLabel }>{shortcut.label}</div>\n        </li>\n      );\n    });\n\n    return (\n      <div className={ style.shortcuts }>\n        <h2 className={ style.header }>Shortcuts</h2>\n        <div\n          className={ style.closeButton }\n          onClick={ this.props.handleShortcutsToggle }>\n          <FontAwesomeIcon icon={ faWindowClose } />\n        </div>\n        <ul className={ style.list }>{hotKeysCheatsheet}</ul>\n      </div>\n    );\n  }\n}\n\nKeyboardShortcuts.propTypes = {\n  handleShortcutsToggle: PropTypes.func\n};\n\nexport default KeyboardShortcuts;\n","import React from 'react';\nimport {\n  faCog,\n  faKeyboard,\n  faShare\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport style from '../index.module.css';\n\nclass Header extends React.Component {\n\n  // to avoid unnecessary re-renders\n  shouldComponentUpdate(nextProps) {\n    if (nextProps !== this.props) return true;\n\n    return false;\n  }\n  render() {\n    const props = this.props;\n\n    return (<>\n      <header className={ style.header }>\n        {props.showSettings ? props.settings : null}\n        {props.showShortcuts ? props.shortcuts : null}\n        {props.showExportOptions ? props.exportOptions : null}\n        {props.tooltip}\n      </header>\n      <nav className={ style.nav }>\n        {props.mediaUrl === null ? null : props.mediaControls}\n      </nav>\n\n\n    </>);\n  };\n}\n\n// inside original return\n// <div className={ style.settingsContainer }>\n//   <button\n//     className={ style.settingsButton }\n//     title=\"Settings\"\n//     onClick={ props.handleSettingsToggle }\n//   >\n//     <FontAwesomeIcon icon={ faCog } />\n//   </button>\n//   <button\n//     className={ `${ style.settingsButton } ${ style.keyboardShortcutsButon }` }\n//     title=\"view shortcuts\"\n//     onClick={ props.handleShortcutsToggle }\n//   >\n//     <FontAwesomeIcon icon={ faKeyboard } />\n//   </button>\n//   <button\n//     className={ `${ style.settingsButton }` }\n//     title=\"Export\"\n//     onClick={ props.handleExportToggle }\n//   >\n//     <FontAwesomeIcon icon={ faShare } />\n//   </button>\n// </div>\n\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons';\n\nimport style from './index.module.css';\n\nclass ExportOptions extends React.Component {\n\n  render() {\n    const btns = this.props.exportOptionsList.map((opt, index) => {\n      return (<><button \n        key={opt.label+index}\n        title={ opt.label }\n        className={ style.playerButton }\n        key={ opt.value }\n        onClick={ this.props.handleExportOptionsChange }\n        value={ opt.value }>\n        {opt.label}\n      </button>\n        <br/>\n      </>);\n    });\n\n    return (\n      <div className={ style.settings }>\n        <h2 className={ style.header }>Export Options</h2>\n        <div className={ style.closeButton }\n          onClick={ this.props.handleExportToggle }\n        >\n          <FontAwesomeIcon icon={ faWindowClose } />\n        </div>\n\n        <div className={ style.controlsContainer }>\n          {btns}\n        </div>\n      </div>\n    );\n  }\n}\n\nExportOptions.propTypes = {\n  handleExportToggle: PropTypes.func\n//   showTimecodes: PropTypes.bool,\n//   showSpeakers: PropTypes.bool,\n//   timecodeOffset: PropTypes.number,\n//   handleShowTimecodes: PropTypes.func,\n//   handleShowSpeakers: PropTypes.func,\n//   handleSetTimecodeOffset: PropTypes.func,\n//   handleSettingsToggle: PropTypes.func,\n//   handlePauseWhileTyping: PropTypes.func,\n//   handleIsScrollIntoViewChange: PropTypes.func,\n//   handleRollBackValueInSeconds: PropTypes.func,\n//   defaultValueScrollSync: PropTypes.bool,\n//   defaultValuePauseWhileTyping: PropTypes.bool,\n//   defaultRollBackValueInSeconds: PropTypes.number,\n//   previewIsDisplayed: PropTypes.bool,\n//   handlePreviewIsDisplayed: PropTypes.func,\n//   // previewViewWidth: PropTypes.string,\n//   handleChangePreviewViewWidth: PropTypes.func,\n//   handleAnalyticsEvents: PropTypes.func\n};\n\nexport default ExportOptions;\n","import React from 'react';\nimport {\n  faKeyboard,\n  faQuestionCircle,\n  faMousePointer,\n  faICursor,\n  faUserEdit,\n  faSave\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Tooltip from 'react-simple-tooltip';\nimport style from '../index.module.css';\n\nconst helpMessage = (\n  <div className={ style.helpMessage }>\n    <span>\n      <FontAwesomeIcon className={ style.icon } icon={ faMousePointer } />\n        Double click on a word or timestamp to jump to that point in the\n        video.\n    </span>\n    <span>\n      <FontAwesomeIcon className={ style.icon } icon={ faICursor } />\n        Start typing to edit text.\n    </span>\n    <span>\n      <FontAwesomeIcon className={ style.icon } icon={ faUserEdit } />\n        You can add and change names of speakers in your transcript.\n    </span>\n    <span>\n      <FontAwesomeIcon className={ style.icon } icon={ faKeyboard } />\n        Use keyboard shortcuts for quick control.\n    </span>\n    <span>\n      <FontAwesomeIcon className={ style.icon } icon={ faSave } />\n        Save & export to get a copy to your desktop.\n    </span>\n  </div>\n);\n\nconst HowDoesThisWork = (\n  <Tooltip\n    className={ style.help }\n    content={ helpMessage }\n    fadeDuration={ 250 }\n    fadeEasing={ 'ease-in' }\n    placement={ 'bottom' }\n    radius={ 5 }\n    border={ '#ffffff' }\n    background={ '#f2f2f2' }\n    color={ '#000000' }\n  >\n    <FontAwesomeIcon className={ style.icon } icon={ faQuestionCircle } />\n      How does this work?\n  </Tooltip>\n);\n\nexport default HowDoesThisWork;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TimedTextEditor from \"../timed-text-editor\";\nimport MediaPlayer from \"../media-player\";\nimport VideoPlayer from \"../video-player\";\nimport Settings from \"../settings\";\nimport Shortcuts from \"../keyboard-shortcuts\";\nimport { secondsToTimecode } from \"../../util/timecode-converter\";\nimport Header from \"./src/Header.js\";\nimport ExportOptions from \"./src/ExportOptions.js\";\nimport style from \"./index.module.css\";\n\n// Add\nimport { Container, Label } from 'semantic-ui-react'\n// import 'semantic-ui-css/semantic.min.css';\n// import Text from 'react';\n\n// TODO: move to another file with tooltip - rename HowDoesThisWork or HelpMessage\nimport HowDoesThisWork from \"./src/HowDoesThisWork.js\";\n\nconst exportOptionsList = [\n  { value: \"txt\", label: \"Text file\" },\n  {\n    value: \"txtspeakertimecodes\",\n    label: \"Text file - with Speakers and Timecodes\"\n  },\n  { value: \"docx\", label: \"MS Word\" },\n  { value: \"srt\", label: \"Srt - Captions\" },\n  { value: \"ttml\", label: \"TTML - Captions\" },\n  { value: \"premiereTTML\", label: \"TTML for Adobe Premiere - Captions\" },\n  { value: \"itt\", label: \"iTT - Captions\" },\n  { value: \"csv\", label: \"CSV - Captions\" },\n  { value: \"vtt\", label: \"VTT - Captions\" },\n  { value: \"pre-segment-txt\", label: \"Pre segmented txt - Captions\" },\n  { value: \"json-captions\", label: \"Json - Captions\" },\n  { value: \"draftjs\", label: \"Draft Js - json\" },\n  { value: \"digitalpaperedit\", label: \"Digital Paper Edit - Json\" }\n];\n\nclass TranscriptEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n\n    this.state = {\n      currentTime: 0,\n      transcriptData: null,\n      isScrollIntoViewOn: false,\n      showSettings: false,\n      showShortcuts: false,\n      showExportOptions: false,\n      isPauseWhileTypingOn: true,\n      rollBackValueInSeconds: 15,\n      timecodeOffset: 0,\n      showTimecodes: true,\n      showSpeakers: true,\n      previewIsDisplayed: true,\n      mediaDuration: \"00:00:00:00\",\n      gridDisplay: null,\n      summaryLength: 0,\n      analyticsEvents: [],\n      numWordSelected: 0,\n      sentSelected: [],\n      numWordRecommendStr: 'Select at least ONE sentence!'\n    };\n    this.timedTextEditorRef = React.createRef();\n\n    this.summaryInput = React.createRef();\n  }\n\n  static getDerivedStateFromProps(nextProps) {\n    if (nextProps.transcriptData !== null) {\n      return {\n        transcriptData: nextProps.transcriptData\n      };\n    }\n\n    return null;\n  }\n\n  // performance optimization\n  shouldComponentUpdate = (nextProps, nextState) => {\n    if (nextProps.mediaUrl !== this.props.mediaUrl) {\n      return true;\n    }\n    return nextState !== this.state;\n  };\n\n  componentDidMount = () => {\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions);\n  };\n\n  updateDimensions = () => {\n    let gridDisplay = {\n      display: \"grid\",\n      gridTemplateColumns: \"1fr 3fr\",\n      gridColumnGap: \"1em\"\n    };\n    let displayMedia = null;\n    // if the mediaUrl is for an audio file, then extend TimedTextEditor to be full width\n    if (this.props.mediaType === \"audio\") {\n      console.log(\"this.props.mediaType\", this.props.mediaType);\n      gridDisplay = null;\n      displayMedia = { display: \"none\" };\n    }\n    // Handeling mobile view\n    const width = Math.max(\n      document.documentElement.clientWidth,\n      window.innerWidth || 0\n    );\n    if (width <= 767) {\n      gridDisplay = null;\n    }\n    this.setState({\n      gridDisplay,\n      displayMedia\n    });\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  handleWordClick = startTime => {\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: \"TranscriptEditor\",\n        action: \"doubleClickOnWord\",\n        name: \"startTime\",\n        value: secondsToTimecode(startTime)\n      });\n    }\n\n    this.setCurrentTime(startTime);\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  handleTimeUpdate = e => {\n    const currentTime = e.target.currentTime;\n    this.setState({\n      currentTime\n    });\n  };\n\n  handlePlayMedia = isPlaying => {\n    this.playMedia(isPlaying);\n  };\n\n  handleIsPlaying = () => {\n    return this.isPlaying();\n  };\n\n  handleIsScrollIntoViewChange = e => {\n    const isChecked = e.target.checked;\n    this.setState({ isScrollIntoViewOn: isChecked });\n\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: \"TranscriptEditor\",\n        action: \"handleIsScrollIntoViewChange\",\n        name: \"isScrollIntoViewOn\",\n        value: isChecked\n      });\n    }\n  };\n  handlePauseWhileTyping = e => {\n    const isChecked = e.target.checked;\n    this.setState({ isPauseWhileTypingOn: isChecked });\n\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: \"TranscriptEditor\",\n        action: \"handlePauseWhileTyping\",\n        name: \"isPauseWhileTypingOn\",\n        value: isChecked\n      });\n    }\n  };\n\n  handleRollBackValueInSeconds = e => {\n    const rollBackValue = e.target.value;\n    this.setState({ rollBackValueInSeconds: rollBackValue });\n\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: \"TranscriptEditor\",\n        action: \"handleRollBackValueInSeconds\",\n        name: \"rollBackValueInSeconds\",\n        value: rollBackValue\n      });\n    }\n  };\n\n  handleSetTimecodeOffset = timecodeOffset => {\n    this.setState({ timecodeOffset: timecodeOffset }, () => {\n      this.timedTextEditorRef.current.forceUpdate();\n    });\n  };\n\n  handleShowTimecodes = e => {\n    const isChecked = e.target.checked;\n    this.setState({ showTimecodes: isChecked });\n\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: \"TranscriptEditor\",\n        action: \"handleShowTimecodes\",\n        name: \"showTimecodes\",\n        value: isChecked\n      });\n    }\n  };\n\n  handleShowSpeakers = e => {\n    const isChecked = e.target.checked;\n    this.setState({ showSpeakers: isChecked });\n\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: \"TranscriptEditor\",\n        action: \"handleShowSpeakers\",\n        name: \"showSpeakers\",\n        value: isChecked\n      });\n    }\n  };\n\n  handleSettingsToggle = () => {\n    this.setState(\n      prevState => ({\n        showSettings: !prevState.showSettings\n      }),\n      () => {\n        if (this.props.handleAnalyticsEvents) {\n          this.props.handleAnalyticsEvents({\n            category: \"TranscriptEditor\",\n            action: \"handleSettingsToggle\",\n            name: \"showSettings\",\n            value: !this.state.showSettings\n          });\n        }\n      }\n    );\n  };\n\n  handleShortcutsToggle = () => {\n    this.setState(\n      prevState => ({\n        showShortcuts: !prevState.showShortcuts\n      }),\n      () => {\n        if (this.props.handleAnalyticsEvents) {\n          this.props.handleAnalyticsEvents({\n            category: \"TranscriptEditor\",\n            action: \"handleShortcutsToggle\",\n            name: \"showShortcuts\",\n            value: !this.state.showShortcuts\n          });\n        }\n      }\n    );\n  };\n\n  handleExportToggle = () => {\n    console.log(\"handleExportToggle\", this.state.showExportOptions);\n    this.setState(\n      prevState => ({\n        showExportOptions: !prevState.showExportOptions\n      }),\n      () => {\n        if (this.props.handleAnalyticsEvents) {\n          this.props.handleAnalyticsEvents({\n            category: \"TranscriptEditor\",\n            action: \"handleExportToggle\",\n            name: \"showExportOptions\",\n            value: !this.state.showExportOptions\n          });\n        }\n      }\n    );\n  };\n\n  handleExportOptionsChange = e => {\n    const exportFormat = e.target.value;\n    console.log(exportFormat);\n    if (exportFormat !== \"instructions\") {\n      const fileName = this.props.title\n        ? this.props.title\n        : this.props.mediaUrl;\n\n      const { data, ext } = this.getEditorContent(exportFormat);\n      let tmpData = data;\n      if (ext === \"json\") {\n        tmpData = JSON.stringify(data, null, 2);\n      }\n      if (ext !== \"docx\") {\n        this.download(tmpData, `${fileName}.${ext}`);\n      }\n\n      if (this.props.handleAnalyticsEvents) {\n        this.props.handleAnalyticsEvents({\n          category: \"TranscriptEditor\",\n          action: \"handleExportOptionsChange\",\n          name: \"exportFile\",\n          value: exportFormat\n        });\n      }\n    }\n  };\n\n  // https://stackoverflow.com/questions/2897619/using-html5-javascript-to-generate-and-save-a-file\n  download = (content, filename, contentType) => {\n    const type = contentType || \"application/octet-stream\";\n    const link = document.createElement(\"a\");\n    const blob = new Blob([content], { type: type });\n\n    link.href = window.URL.createObjectURL(blob);\n    link.download = filename;\n    // Firefox fix - cannot do link.click() if it's not attached to DOM in firefox\n    // https://stackoverflow.com/questions/32225904/programmatical-click-on-a-tag-not-working-in-firefox\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  getEditorContent = exportFormat => {\n    const title = this.props.title ? this.props.title : \"\";\n\n    return this.timedTextEditorRef.current.getEditorContent(\n      exportFormat,\n      title\n    );\n  };\n\n  handlePreviewIsDisplayed = () => {\n    this.setState({\n      previewIsDisplayed: !this.state.previewIsDisplayed\n    });\n  };\n\n  onLoadedDataGetDuration = e => {\n    const currentDuration = e.target.duration;\n    const currentDurationWithOffset =\n      currentDuration + this.state.timecodeOffset;\n    const durationInSeconds = secondsToTimecode(currentDurationWithOffset);\n\n    this.setState({\n      mediaDuration: durationInSeconds\n    });\n\n    if (this.props.handleAnalyticsEvents) {\n      this.props.handleAnalyticsEvents({\n        category: \"TranscriptEditor\",\n        action: \"onLoadedDataGetDuration\",\n        name: \"durationInSeconds-WithoutOffset\",\n        value: secondsToTimecode(currentDuration)\n      });\n    }\n  };\n\n  handleChangePreviewViewWidth = e => {\n    const newPreviewViewWidth = e.target.value;\n    this.setState({\n      previewViewWidth: newPreviewViewWidth\n    });\n  };\n\n  handleAutoSaveChanges = data => {\n    // making `TranscriptEditor` - `handleAutoSaveChanges` optional\n    if (this.props.handleAutoSaveChanges) {\n      this.props.handleAutoSaveChanges(data);\n    }\n  };\n\n  handleRemove = (id) => {\n    const newList = this.state.sentSelected.filter((item) => item !== id);\n    this.setState({sentSelected: newList})\n  };\n\n  handleNumWord = event => {\n    // console.log('before', this.state.numWordSelected)\n    // console.log(JSON.stringify(event))\n\n    this.setState({ numWordSelected: this.state.numWordSelected + event.value }, () => {\n        if (this.state.numWordSelected === 0) {\n          this.setState({ numWordRecommendStr: \"Select at least ONE sentence!\" });\n        } else if (this.state.numWordSelected < 50) {\n          this.setState({ numWordRecommendStr: \"Recommend to select MORE sentences!\" });\n        } else if (this.state.numWordSelected < 80) {\n          this.setState({ numWordRecommendStr: \"Good amount! But, you could select more.\" });\n        } else {\n          this.setState({ numWordRecommendStr: \"Too many sentences selected!\" });\n        }\n      }\n    );\n\n    if (event.action === \"addSelection\") {\n      this.setState({ sentSelected: [...this.state.sentSelected, event.sent] });\n    } else {\n      this.handleRemove(event.sent)\n    }\n\n  };\n\n\n\n  render() {\n    const videoPlayer = (\n      <VideoPlayer\n        mediaUrl={this.props.mediaUrl}\n        onTimeUpdate={this.handleTimeUpdate}\n        videoRef={this.videoRef}\n        previewIsDisplayed={this.state.previewIsDisplayed}\n        onLoadedDataGetDuration={this.onLoadedDataGetDuration}\n      />\n    );\n\n    const mediaControls = (\n      <MediaPlayer\n        title={this.props.title ? this.props.title : \"\"}\n        mediaDuration={this.state.mediaDuration}\n        currentTime={this.state.currentTime}\n        hookSeek={foo => (this.setCurrentTime = foo)}\n        hookPlayMedia={foo => (this.playMedia = foo)}\n        hookIsPlaying={foo => (this.isPlaying = foo)}\n        rollBackValueInSeconds={this.state.rollBackValueInSeconds}\n        timecodeOffset={this.state.timecodeOffset}\n        mediaUrl={this.props.mediaUrl}\n        handleAnalyticsEvents={this.props.handleAnalyticsEvents}\n        videoRef={this.videoRef}\n      />\n    );\n\n    const settings = (\n      <Settings\n        handleSettingsToggle={this.handleSettingsToggle}\n        defaultValuePauseWhileTyping={this.state.isPauseWhileTypingOn}\n        defaultValueScrollSync={this.state.isScrollIntoViewOn}\n        defaultRollBackValueInSeconds={this.state.rollBackValueInSeconds}\n        timecodeOffset={this.state.timecodeOffset}\n        showTimecodes={this.state.showTimecodes}\n        showSpeakers={this.state.showSpeakers}\n        handlePauseWhileTyping={this.handlePauseWhileTyping}\n        handleIsScrollIntoViewChange={this.handleIsScrollIntoViewChange}\n        handleRollBackValueInSeconds={this.handleRollBackValueInSeconds}\n        handleSetTimecodeOffset={this.handleSetTimecodeOffset}\n        handleShowTimecodes={this.handleShowTimecodes}\n        handleShowSpeakers={this.handleShowSpeakers}\n        handleAnalyticsEvents={this.props.handleAnalyticsEvents}\n        previewIsDisplayed={this.state.previewIsDisplayed}\n        handlePreviewIsDisplayed={this.handlePreviewIsDisplayed}\n        handleChangePreviewViewWidth={this.handleChangePreviewViewWidth}\n      />\n    );\n\n    const exportOptions = (\n      <ExportOptions\n        exportOptionsList={exportOptionsList}\n        handleExportOptionsChange={this.handleExportOptionsChange}\n        handleExportToggle={this.handleExportToggle}\n      />\n    );\n\n    const shortcuts = (\n      <Shortcuts handleShortcutsToggle={this.handleShortcutsToggle} />\n    );\n\n    // export format for `handleAutoSaveChanges` is assigned with `autoSaveContentType`\n    // but if that's not specified  it looks at  `sttJsonType`\n    // if that's not specified either, it falls back on `draftjs`.\n    let contentFormat = \"draftjs\";\n    if (this.props.autoSaveContentType) {\n      contentFormat = this.props.autoSaveContentType;\n    } else if (this.props.sttJsonType) {\n      contentFormat = this.props.sttJsonType;\n    }\n\n    const timedTextEditor = (\n      <TimedTextEditor\n        fileName={this.props.fileName}\n        transcriptData={this.state.transcriptData}\n        timecodeOffset={this.state.timecodeOffset}\n        onWordClick={this.handleWordClick}\n        playMedia={this.handlePlayMedia}\n        isPlaying={this.handleIsPlaying}\n        currentTime={this.state.currentTime}\n        isEditable={this.props.isEditable}\n        spellCheck={this.props.spellCheck}\n        sttJsonType={this.props.sttJsonType}\n        mediaUrl={this.props.mediaUrl}\n        isScrollIntoViewOn={this.state.isScrollIntoViewOn}\n        isPauseWhileTypingOn={this.state.isPauseWhileTypingOn}\n        showTimecodes={this.state.showTimecodes}\n        showSpeakers={this.state.showSpeakers}\n        ref={this.timedTextEditorRef}\n        handleAnalyticsEvents={this.props.handleAnalyticsEvents}\n        handleAutoSaveChanges={this.handleAutoSaveChanges}\n        autoSaveContentType={contentFormat}\n        title={this.props.title ? this.props.title : Date.now()}\n        handleNumWord={this.handleNumWord}\n      />\n    );\n\n\n    // tooltip={HowDoesThisWork}\n\n    const header = (\n      <Header\n        mediaUrl={this.props.mediaUrl}\n        mediaControls={this.videoRef.current ? mediaControls : null}\n        showSettings={this.state.showSettings}\n        showShortcuts={this.state.showShortcuts}\n        showExportOptions={this.state.showExportOptions}\n        settings={settings}\n        shortcuts={shortcuts}\n        exportOptions={exportOptions}\n        handleExportToggle={this.handleExportToggle}\n        handleSettingsToggle={this.handleSettingsToggle}\n        handleShortcutsToggle={this.handleShortcutsToggle}\n      />\n    );\n\n    const onChange = (event) => {\n      this.setState({ summaryLength: event.target.value.length});\n    }\n\n    const LabelApp = ({ children }) => (\n      <Container style={{ margin: 20 }}>\n        {children}\n      </Container>\n    );\n\n    const LabelRecommendStr = () => (\n      <div>\n          <Label as='a' basic color='red' pointing>\n            'test'\n          </Label>\n      </div>\n    );\n\n    // const styleLink = document.createElement(\"link\");\n    // styleLink.rel = \"stylesheet\";\n    // styleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\n    // document.head.appendChild(styleLink);\n\n    // <Form><Form.Field><Label basic color='red' pointing='below'>{this.state.numWordRecommendStr}</Label></Form.Field></Form>\n\n    // <LabelApp> {LabelRecommendStr} </LabelApp>\n\n    return (\n      <div className={style.container}>\n        {this.props.mediaUrl ? header : null}\n\n        <div className={style.grid}>\n          <section className={style.row} style={this.state.gridDisplay}>\n            <aside className={style.aside} style={this.state.displayMedia} style={{ paddingLeft: \"0.75em\" }}>\n              {this.props.mediaUrl ? videoPlayer : null}\n\n              <div>\n                <label for=\"summary\">Write a summary in your own words related to the sentences you selected. A minimum length of 100 characters is required. You can write more than 100 characters if you need to.</label>\n                <p>Characters written = <nobr style={{ color: 'red' }}>{this.state.summaryLength}</nobr></p>\n                <textarea ref={this.summaryInput} onChange={event => onChange(event)} className=\"written-summary\" name=\"summary\" rows=\"6\" cols=\"55\" minlength=\"100\" style={{ padding: \"0.5em\" }} />\n              </div>\n\n              <div>\n                <p style={{ color: 'green' }}><nobr style={{ color: 'black' }}>Selected Sentences:</nobr> {JSON.stringify(this.state.sentSelected, null, 2)}</p>\n              </div>\n\n              <div>\n                <p>Total number of words for selected sentences = <nobr style={{ color: 'red' }}>{this.state.numWordSelected}</nobr></p>\n                <p style={{ color: 'red' }}>👉 {this.state.numWordRecommendStr} 👈</p>\n              </div>\n\n            </aside>\n\n            <main\n              className={\n                this.props.mediaType === \"audio\"\n                  ? style.mainWithAudiio\n                  : style.main\n              }\n            >\n              {this.props.mediaUrl && this.props.transcriptData\n                ? timedTextEditor\n                : null}\n            </main>\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nTranscriptEditor.propTypes = {\n  onClick: PropTypes.func,\n  title: PropTypes.string,\n  mediaUrl: PropTypes.string,\n  isEditable: PropTypes.bool,\n  spellCheck: PropTypes.bool,\n  sttJsonType: PropTypes.string,\n  handleAnalyticsEvents: PropTypes.func,\n  fileName: PropTypes.string,\n  transcriptData: PropTypes.object,\n  mediaType: PropTypes.string\n};\n\nexport default TranscriptEditor;\n","import React, { Component, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n// import PropTypes from \"prop-types\";\nimport logo from './logo.svg';\nimport './App.css';\nimport CustomModal from './Modal';\n\n// import SelectionHighlighter from \"react-highlight-selection\";\nimport TranscriptEditor from \"./packages/components/transcript-editor\";\n\n// https://combinatronics.com/sangwoo3/html_files/master\n\n// import DEMO_TRANSCRIPT from \"./sample-data/example_stt_010-020\"; //example_stt.json\"; //gcpSttSpeakerDiarization.sample.json; example.json; KateDarling-bbcKaldiTranscriptWithSpeakerSegments.json;\n// const DEMO_TRANSCRIPT = \"./sample-data/example_stt_010-020.json\"\nconst DEMO_TRANSCRIPT = \"https://raw.githubusercontent.com/sangwoo3/html_files/master/transcripts/transcript_v1382_s19.json\"\nconst DEMO_MEDIA_URL = \"https://livestream-videos-prod.s3-us-west-2.amazonaws.com/stream-9a3662c2-84e0-4bce-8cf5-cb9849f38d29-s3.mp4\";\nconst DEMO_TITLE = \"Black and White Photography in Photoshop\" // \"TED Talk | Kate Darling - Why we have an emotional connection to robots\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      transcriptData: null,\n      mediaUrl: null,\n      isTextEditable: false,\n      spellCheck: false,\n      sttType: \"google-stt\",//\"bbckaldi\",\n      analyticsEvents: [],\n      title: \"\",\n      fileName: \"\",\n      autoSaveData: {},\n      autoSaveContentType: \"draftjs\",\n      autoSaveExtension: \"json\"\n    };\n\n    this.transcriptEditorRef = React.createRef();\n  }\n\n  componentDidMount () {\n    this.loadVideo();\n  }\n\n\n  loadVideo = () => {\n    const transcriptData_ = document.getElementById(\"transcriptData\");//this.transcriptDataInput.current;\n    const mediaUrl_       = document.getElementById(\"mediaUrl\");//this.mediaUrlInput.current;\n    const title_          = document.getElementById(\"title\");//this.titleInput.current;\n    // console.log(transcriptData_.value, mediaUrl_.value, title_.value)\n\n    // const transcriptData_ =  DEMO_TRANSCRIPT\n    // const mediaUrl_ = DEMO_MEDIA_URL\n    // const title_ = DEMO_TITLE\n    // console.log(transcriptData_, mediaUrl_, title_)\n\n\n    fetch(transcriptData_.value) // .value\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ transcriptData: data })\n      })\n      .catch(console.log)\n\n    this.setState({\n       // transcriptData: transcriptData, //this.state.transcriptData, //DEMO_TRANSCRIPT,\n       mediaUrl: mediaUrl_.value, //DEMO_MEDIA_URL,\n       title: title_.value, //DEMO_TITLE,\n       sttType: \"google-stt\" //\"bbckaldi\"\n     });\n\n  };\n\n  handleAnalyticsEvents = event => {\n    this.setState({ analyticsEvents: [...this.state.analyticsEvents, event] });\n  };\n\n  // inside return\n  // <section style={{ height: \"250px\", width: \"50%\", float: \"left\" }}>\n  //   <h3>Components Analytics</h3>\n  //   <textarea\n  //     style={{ height: \"100%\", width: \"100%\" }}\n  //     value={JSON.stringify(this.state.analyticsEvents, null, 2)}\n  //     disabled\n  //   />\n  // </section>\n\n  render () {\n    return (\n      <div className=\"Summary_annotation\">\n        <CustomModal />\n\n        <TranscriptEditor\n          transcriptData={this.state.transcriptData}\n          fileName={this.state.fileName}\n          mediaUrl={this.state.mediaUrl}\n          isEditable={this.state.isTextEditable}\n          spellCheck={this.state.spellCheck}\n          sttJsonType={this.state.sttType}\n          handleAnalyticsEvents={this.handleAnalyticsEvents}\n          title={this.state.title}\n          ref={this.transcriptEditorRef}\n          handleAutoSaveChanges={this.handleAutoSaveChanges}\n          autoSaveContentType={this.state.autoSaveContentType}\n          mediaType={ 'video' }\n        />\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// https://combinatronics.com/sangwoo3/html_files/master\n\n// <input type=\"hidden\" id=\"transcriptData\" name=\"transcriptData\" value=\"https://raw.githubusercontent.com/sangwoo3/html_files/master/transcripts/transcript_352_000-010.json\"/>\n// <input type=\"hidden\" id=\"mediaUrl\" name=\"mediaUrl\" value=\"https://livestream-videos-prod.s3-us-west-2.amazonaws.com/stream-83b34c7d-772b-43cc-8e9f-c0d325eaf08b-s3.mp4\"/>\n// <input type=\"hidden\" id=\"title\" name=\"title\" value=\"Black and White Photography in Photoshop\"/>\n//\n// <input type=\"hidden\" id=\"transcriptData\" name=\"transcriptData\" value=\"${transcriptData}\"/>\n// <input type=\"hidden\" id=\"mediaUrl\" name=\"mediaUrl\" value=\"${mediaUrl}\"/>\n// <input type=\"hidden\" id=\"title\" name=\"title\" value=\"${title}\"/>\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"shortcuts\":\"keyboard-shortcuts_shortcuts__2swkx\",\"header\":\"keyboard-shortcuts_header__NuhLA\",\"closeButton\":\"keyboard-shortcuts_closeButton__3er9F\",\"list\":\"keyboard-shortcuts_list__jnAk_\",\"listItem\":\"keyboard-shortcuts_listItem__1TzzX\",\"shortcut\":\"keyboard-shortcuts_shortcut__30R3D\",\"shortcutLabel\":\"keyboard-shortcuts_shortcutLabel__vpBex\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"unselectable\":\"WrapperBlock_unselectable__hU6QO\",\"markers\":\"WrapperBlock_markers__3K8G3\",\"WrapperBlock\":\"WrapperBlock_WrapperBlock__3ORF6\",\"speaker\":\"WrapperBlock_speaker__3292e\",\"text\":\"WrapperBlock_text__2-HUA\",\"time\":\"WrapperBlock_time__3dZaD\",\"speakerEditable\":\"WrapperBlock_speakerEditable__3tFkP\",\"speakerNotEditable\":\"WrapperBlock_speakerNotEditable__3f0oJ\",\"EditLabel\":\"WrapperBlock_EditLabel__2xvZJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topSection\":\"media-player_topSection__3PvSj\",\"playerSection\":\"media-player_playerSection__1kHsH\",\"controlsSection\":\"media-player_controlsSection__2zuBP\",\"title\":\"media-player_title__3Z1Ji\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"src_settings__4QuRl\",\"header\":\"src_header__qzCif\",\"closeButton\":\"src_closeButton__3VXOJ\",\"controlsContainer\":\"src_controlsContainer__1vQty\",\"settingElement\":\"src_settingElement__jGE9a\",\"label\":\"src_label__vApSA\",\"rollbackValue\":\"src_rollbackValue__Jq3w-\",\"timecodeLabel\":\"src_timecodeLabel__2e9q_\",\"playerButton\":\"src_playerButton__1Zs-d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"offsetContainer\":\"TimecodeOffset_offsetContainer__3fg-M\",\"inputBox\":\"TimecodeOffset_inputBox__2hVnK\",\"button\":\"TimecodeOffset_button__3fQGw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"switchContainer\":\"Toggle_switchContainer__42-hg\",\"switch\":\"Toggle_switch__1O_V_\",\"slider\":\"Toggle_slider__CPVDs\"};"],"sourceRoot":""}